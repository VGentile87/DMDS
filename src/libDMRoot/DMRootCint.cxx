//
// File generated by rootcint at Fri Oct 13 17:56:02 2017

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME DMRootCint
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "DMRootCint.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void DMRAffine2D_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_DMRAffine2D(void *p = 0);
   static void *newArray_DMRAffine2D(Long_t size, void *p);
   static void delete_DMRAffine2D(void *p);
   static void deleteArray_DMRAffine2D(void *p);
   static void destruct_DMRAffine2D(void *p);
   static void streamer_DMRAffine2D(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::DMRAffine2D*)
   {
      ::DMRAffine2D *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::DMRAffine2D >(0);
      static ::ROOT::TGenericClassInfo 
         instance("DMRAffine2D", ::DMRAffine2D::Class_Version(), "./DMRAffine2D.h", 7,
                  typeid(::DMRAffine2D), ::ROOT::DefineBehavior(ptr, ptr),
                  &::DMRAffine2D::Dictionary, isa_proxy, 0,
                  sizeof(::DMRAffine2D) );
      instance.SetNew(&new_DMRAffine2D);
      instance.SetNewArray(&newArray_DMRAffine2D);
      instance.SetDelete(&delete_DMRAffine2D);
      instance.SetDeleteArray(&deleteArray_DMRAffine2D);
      instance.SetDestructor(&destruct_DMRAffine2D);
      instance.SetStreamerFunc(&streamer_DMRAffine2D);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::DMRAffine2D*)
   {
      return GenerateInitInstanceLocal((::DMRAffine2D*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DMRAffine2D*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void DMRCluster_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_DMRCluster(void *p = 0);
   static void *newArray_DMRCluster(Long_t size, void *p);
   static void delete_DMRCluster(void *p);
   static void deleteArray_DMRCluster(void *p);
   static void destruct_DMRCluster(void *p);
   static void streamer_DMRCluster(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::DMRCluster*)
   {
      ::DMRCluster *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::DMRCluster >(0);
      static ::ROOT::TGenericClassInfo 
         instance("DMRCluster", ::DMRCluster::Class_Version(), "./DMRCluster.h", 7,
                  typeid(::DMRCluster), ::ROOT::DefineBehavior(ptr, ptr),
                  &::DMRCluster::Dictionary, isa_proxy, 0,
                  sizeof(::DMRCluster) );
      instance.SetNew(&new_DMRCluster);
      instance.SetNewArray(&newArray_DMRCluster);
      instance.SetDelete(&delete_DMRCluster);
      instance.SetDeleteArray(&deleteArray_DMRCluster);
      instance.SetDestructor(&destruct_DMRCluster);
      instance.SetStreamerFunc(&streamer_DMRCluster);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::DMRCluster*)
   {
      return GenerateInitInstanceLocal((::DMRCluster*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DMRCluster*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void DMRView_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_DMRView(void *p = 0);
   static void *newArray_DMRView(Long_t size, void *p);
   static void delete_DMRView(void *p);
   static void deleteArray_DMRView(void *p);
   static void destruct_DMRView(void *p);
   static void streamer_DMRView(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::DMRView*)
   {
      ::DMRView *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::DMRView >(0);
      static ::ROOT::TGenericClassInfo 
         instance("DMRView", ::DMRView::Class_Version(), "./DMRView.h", 15,
                  typeid(::DMRView), ::ROOT::DefineBehavior(ptr, ptr),
                  &::DMRView::Dictionary, isa_proxy, 0,
                  sizeof(::DMRView) );
      instance.SetNew(&new_DMRView);
      instance.SetNewArray(&newArray_DMRView);
      instance.SetDelete(&delete_DMRView);
      instance.SetDeleteArray(&deleteArray_DMRView);
      instance.SetDestructor(&destruct_DMRView);
      instance.SetStreamerFunc(&streamer_DMRView);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::DMRView*)
   {
      return GenerateInitInstanceLocal((::DMRView*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DMRView*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void DMRGrain_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_DMRGrain(void *p = 0);
   static void *newArray_DMRGrain(Long_t size, void *p);
   static void delete_DMRGrain(void *p);
   static void deleteArray_DMRGrain(void *p);
   static void destruct_DMRGrain(void *p);
   static void streamer_DMRGrain(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::DMRGrain*)
   {
      ::DMRGrain *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::DMRGrain >(0);
      static ::ROOT::TGenericClassInfo 
         instance("DMRGrain", ::DMRGrain::Class_Version(), "./DMRGrain.h", 7,
                  typeid(::DMRGrain), ::ROOT::DefineBehavior(ptr, ptr),
                  &::DMRGrain::Dictionary, isa_proxy, 0,
                  sizeof(::DMRGrain) );
      instance.SetNew(&new_DMRGrain);
      instance.SetNewArray(&newArray_DMRGrain);
      instance.SetDelete(&delete_DMRGrain);
      instance.SetDeleteArray(&deleteArray_DMRGrain);
      instance.SetDestructor(&destruct_DMRGrain);
      instance.SetStreamerFunc(&streamer_DMRGrain);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::DMRGrain*)
   {
      return GenerateInitInstanceLocal((::DMRGrain*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DMRGrain*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void DMRImage_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_DMRImage(void *p = 0);
   static void *newArray_DMRImage(Long_t size, void *p);
   static void delete_DMRImage(void *p);
   static void deleteArray_DMRImage(void *p);
   static void destruct_DMRImage(void *p);
   static void streamer_DMRImage(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::DMRImage*)
   {
      ::DMRImage *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::DMRImage >(0);
      static ::ROOT::TGenericClassInfo 
         instance("DMRImage", ::DMRImage::Class_Version(), "./DMRImage.h", 10,
                  typeid(::DMRImage), ::ROOT::DefineBehavior(ptr, ptr),
                  &::DMRImage::Dictionary, isa_proxy, 0,
                  sizeof(::DMRImage) );
      instance.SetNew(&new_DMRImage);
      instance.SetNewArray(&newArray_DMRImage);
      instance.SetDelete(&delete_DMRImage);
      instance.SetDeleteArray(&deleteArray_DMRImage);
      instance.SetDestructor(&destruct_DMRImage);
      instance.SetStreamerFunc(&streamer_DMRImage);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::DMRImage*)
   {
      return GenerateInitInstanceLocal((::DMRImage*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DMRImage*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void DMRImageCl_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_DMRImageCl(void *p = 0);
   static void *newArray_DMRImageCl(Long_t size, void *p);
   static void delete_DMRImageCl(void *p);
   static void deleteArray_DMRImageCl(void *p);
   static void destruct_DMRImageCl(void *p);
   static void streamer_DMRImageCl(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::DMRImageCl*)
   {
      ::DMRImageCl *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::DMRImageCl >(0);
      static ::ROOT::TGenericClassInfo 
         instance("DMRImageCl", ::DMRImageCl::Class_Version(), "./DMRImage.h", 73,
                  typeid(::DMRImageCl), ::ROOT::DefineBehavior(ptr, ptr),
                  &::DMRImageCl::Dictionary, isa_proxy, 0,
                  sizeof(::DMRImageCl) );
      instance.SetNew(&new_DMRImageCl);
      instance.SetNewArray(&newArray_DMRImageCl);
      instance.SetDelete(&delete_DMRImageCl);
      instance.SetDeleteArray(&deleteArray_DMRImageCl);
      instance.SetDestructor(&destruct_DMRImageCl);
      instance.SetStreamerFunc(&streamer_DMRImageCl);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::DMRImageCl*)
   {
      return GenerateInitInstanceLocal((::DMRImageCl*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DMRImageCl*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void DMRFrame_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_DMRFrame(void *p = 0);
   static void *newArray_DMRFrame(Long_t size, void *p);
   static void delete_DMRFrame(void *p);
   static void deleteArray_DMRFrame(void *p);
   static void destruct_DMRFrame(void *p);
   static void streamer_DMRFrame(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::DMRFrame*)
   {
      ::DMRFrame *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::DMRFrame >(0);
      static ::ROOT::TGenericClassInfo 
         instance("DMRFrame", ::DMRFrame::Class_Version(), "./DMRImage.h", 94,
                  typeid(::DMRFrame), ::ROOT::DefineBehavior(ptr, ptr),
                  &::DMRFrame::Dictionary, isa_proxy, 0,
                  sizeof(::DMRFrame) );
      instance.SetNew(&new_DMRFrame);
      instance.SetNewArray(&newArray_DMRFrame);
      instance.SetDelete(&delete_DMRFrame);
      instance.SetDeleteArray(&deleteArray_DMRFrame);
      instance.SetDestructor(&destruct_DMRFrame);
      instance.SetStreamerFunc(&streamer_DMRFrame);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::DMRFrame*)
   {
      return GenerateInitInstanceLocal((::DMRFrame*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DMRFrame*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void DMRFrameRaw_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_DMRFrameRaw(void *p = 0);
   static void *newArray_DMRFrameRaw(Long_t size, void *p);
   static void delete_DMRFrameRaw(void *p);
   static void deleteArray_DMRFrameRaw(void *p);
   static void destruct_DMRFrameRaw(void *p);
   static void streamer_DMRFrameRaw(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::DMRFrameRaw*)
   {
      ::DMRFrameRaw *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::DMRFrameRaw >(0);
      static ::ROOT::TGenericClassInfo 
         instance("DMRFrameRaw", ::DMRFrameRaw::Class_Version(), "./DMRImage.h", 118,
                  typeid(::DMRFrameRaw), ::ROOT::DefineBehavior(ptr, ptr),
                  &::DMRFrameRaw::Dictionary, isa_proxy, 0,
                  sizeof(::DMRFrameRaw) );
      instance.SetNew(&new_DMRFrameRaw);
      instance.SetNewArray(&newArray_DMRFrameRaw);
      instance.SetDelete(&delete_DMRFrameRaw);
      instance.SetDeleteArray(&deleteArray_DMRFrameRaw);
      instance.SetDestructor(&destruct_DMRFrameRaw);
      instance.SetStreamerFunc(&streamer_DMRFrameRaw);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::DMRFrameRaw*)
   {
      return GenerateInitInstanceLocal((::DMRFrameRaw*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DMRFrameRaw*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void DMRMicrotrack_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_DMRMicrotrack(void *p = 0);
   static void *newArray_DMRMicrotrack(Long_t size, void *p);
   static void delete_DMRMicrotrack(void *p);
   static void deleteArray_DMRMicrotrack(void *p);
   static void destruct_DMRMicrotrack(void *p);
   static void streamer_DMRMicrotrack(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::DMRMicrotrack*)
   {
      ::DMRMicrotrack *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::DMRMicrotrack >(0);
      static ::ROOT::TGenericClassInfo 
         instance("DMRMicrotrack", ::DMRMicrotrack::Class_Version(), "./DMRMicrotrack.h", 9,
                  typeid(::DMRMicrotrack), ::ROOT::DefineBehavior(ptr, ptr),
                  &::DMRMicrotrack::Dictionary, isa_proxy, 0,
                  sizeof(::DMRMicrotrack) );
      instance.SetNew(&new_DMRMicrotrack);
      instance.SetNewArray(&newArray_DMRMicrotrack);
      instance.SetDelete(&delete_DMRMicrotrack);
      instance.SetDeleteArray(&deleteArray_DMRMicrotrack);
      instance.SetDestructor(&destruct_DMRMicrotrack);
      instance.SetStreamerFunc(&streamer_DMRMicrotrack);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::DMRMicrotrack*)
   {
      return GenerateInitInstanceLocal((::DMRMicrotrack*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DMRMicrotrack*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void DMRViewHeader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_DMRViewHeader(void *p = 0);
   static void *newArray_DMRViewHeader(Long_t size, void *p);
   static void delete_DMRViewHeader(void *p);
   static void deleteArray_DMRViewHeader(void *p);
   static void destruct_DMRViewHeader(void *p);
   static void streamer_DMRViewHeader(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::DMRViewHeader*)
   {
      ::DMRViewHeader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::DMRViewHeader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("DMRViewHeader", ::DMRViewHeader::Class_Version(), "./DMRViewHeader.h", 9,
                  typeid(::DMRViewHeader), ::ROOT::DefineBehavior(ptr, ptr),
                  &::DMRViewHeader::Dictionary, isa_proxy, 0,
                  sizeof(::DMRViewHeader) );
      instance.SetNew(&new_DMRViewHeader);
      instance.SetNewArray(&newArray_DMRViewHeader);
      instance.SetDelete(&delete_DMRViewHeader);
      instance.SetDeleteArray(&deleteArray_DMRViewHeader);
      instance.SetDestructor(&destruct_DMRViewHeader);
      instance.SetStreamerFunc(&streamer_DMRViewHeader);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::DMRViewHeader*)
   {
      return GenerateInitInstanceLocal((::DMRViewHeader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DMRViewHeader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void DMRRun_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_DMRRun(void *p = 0);
   static void *newArray_DMRRun(Long_t size, void *p);
   static void delete_DMRRun(void *p);
   static void deleteArray_DMRRun(void *p);
   static void destruct_DMRRun(void *p);
   static void streamer_DMRRun(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::DMRRun*)
   {
      ::DMRRun *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::DMRRun >(0);
      static ::ROOT::TGenericClassInfo 
         instance("DMRRun", ::DMRRun::Class_Version(), "./DMRRun.h", 56,
                  typeid(::DMRRun), ::ROOT::DefineBehavior(ptr, ptr),
                  &::DMRRun::Dictionary, isa_proxy, 0,
                  sizeof(::DMRRun) );
      instance.SetNew(&new_DMRRun);
      instance.SetNewArray(&newArray_DMRRun);
      instance.SetDelete(&delete_DMRRun);
      instance.SetDeleteArray(&deleteArray_DMRRun);
      instance.SetDestructor(&destruct_DMRRun);
      instance.SetStreamerFunc(&streamer_DMRRun);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::DMRRun*)
   {
      return GenerateInitInstanceLocal((::DMRRun*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DMRRun*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void DMRRunHeader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_DMRRunHeader(void *p = 0);
   static void *newArray_DMRRunHeader(Long_t size, void *p);
   static void delete_DMRRunHeader(void *p);
   static void deleteArray_DMRRunHeader(void *p);
   static void destruct_DMRRunHeader(void *p);
   static void streamer_DMRRunHeader(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::DMRRunHeader*)
   {
      ::DMRRunHeader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::DMRRunHeader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("DMRRunHeader", ::DMRRunHeader::Class_Version(), "./DMRRunHeader.h", 9,
                  typeid(::DMRRunHeader), ::ROOT::DefineBehavior(ptr, ptr),
                  &::DMRRunHeader::Dictionary, isa_proxy, 0,
                  sizeof(::DMRRunHeader) );
      instance.SetNew(&new_DMRRunHeader);
      instance.SetNewArray(&newArray_DMRRunHeader);
      instance.SetDelete(&delete_DMRRunHeader);
      instance.SetDeleteArray(&deleteArray_DMRRunHeader);
      instance.SetDestructor(&destruct_DMRRunHeader);
      instance.SetStreamerFunc(&streamer_DMRRunHeader);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::DMRRunHeader*)
   {
      return GenerateInitInstanceLocal((::DMRRunHeader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DMRRunHeader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void DMRTextFile_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_DMRTextFile(void *p = 0);
   static void *newArray_DMRTextFile(Long_t size, void *p);
   static void delete_DMRTextFile(void *p);
   static void deleteArray_DMRTextFile(void *p);
   static void destruct_DMRTextFile(void *p);
   static void streamer_DMRTextFile(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::DMRTextFile*)
   {
      ::DMRTextFile *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::DMRTextFile >(0);
      static ::ROOT::TGenericClassInfo 
         instance("DMRTextFile", ::DMRTextFile::Class_Version(), "./DMRTextFile.h", 9,
                  typeid(::DMRTextFile), ::ROOT::DefineBehavior(ptr, ptr),
                  &::DMRTextFile::Dictionary, isa_proxy, 0,
                  sizeof(::DMRTextFile) );
      instance.SetNew(&new_DMRTextFile);
      instance.SetNewArray(&newArray_DMRTextFile);
      instance.SetDelete(&delete_DMRTextFile);
      instance.SetDeleteArray(&deleteArray_DMRTextFile);
      instance.SetDestructor(&destruct_DMRTextFile);
      instance.SetStreamerFunc(&streamer_DMRTextFile);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::DMRTextFile*)
   {
      return GenerateInitInstanceLocal((::DMRTextFile*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DMRTextFile*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void DMRFiducialMark_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_DMRFiducialMark(void *p = 0);
   static void *newArray_DMRFiducialMark(Long_t size, void *p);
   static void delete_DMRFiducialMark(void *p);
   static void deleteArray_DMRFiducialMark(void *p);
   static void destruct_DMRFiducialMark(void *p);
   static void streamer_DMRFiducialMark(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::DMRFiducialMark*)
   {
      ::DMRFiducialMark *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::DMRFiducialMark >(0);
      static ::ROOT::TGenericClassInfo 
         instance("DMRFiducialMark", ::DMRFiducialMark::Class_Version(), "./DMRFiducial.h", 9,
                  typeid(::DMRFiducialMark), ::ROOT::DefineBehavior(ptr, ptr),
                  &::DMRFiducialMark::Dictionary, isa_proxy, 0,
                  sizeof(::DMRFiducialMark) );
      instance.SetNew(&new_DMRFiducialMark);
      instance.SetNewArray(&newArray_DMRFiducialMark);
      instance.SetDelete(&delete_DMRFiducialMark);
      instance.SetDeleteArray(&deleteArray_DMRFiducialMark);
      instance.SetDestructor(&destruct_DMRFiducialMark);
      instance.SetStreamerFunc(&streamer_DMRFiducialMark);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::DMRFiducialMark*)
   {
      return GenerateInitInstanceLocal((::DMRFiducialMark*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DMRFiducialMark*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void DMRMarksSet_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_DMRMarksSet(void *p = 0);
   static void *newArray_DMRMarksSet(Long_t size, void *p);
   static void delete_DMRMarksSet(void *p);
   static void deleteArray_DMRMarksSet(void *p);
   static void destruct_DMRMarksSet(void *p);
   static void streamer_DMRMarksSet(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::DMRMarksSet*)
   {
      ::DMRMarksSet *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::DMRMarksSet >(0);
      static ::ROOT::TGenericClassInfo 
         instance("DMRMarksSet", ::DMRMarksSet::Class_Version(), "./DMRFiducial.h", 29,
                  typeid(::DMRMarksSet), ::ROOT::DefineBehavior(ptr, ptr),
                  &::DMRMarksSet::Dictionary, isa_proxy, 0,
                  sizeof(::DMRMarksSet) );
      instance.SetNew(&new_DMRMarksSet);
      instance.SetNewArray(&newArray_DMRMarksSet);
      instance.SetDelete(&delete_DMRMarksSet);
      instance.SetDeleteArray(&deleteArray_DMRMarksSet);
      instance.SetDestructor(&destruct_DMRMarksSet);
      instance.SetStreamerFunc(&streamer_DMRMarksSet);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::DMRMarksSet*)
   {
      return GenerateInitInstanceLocal((::DMRMarksSet*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DMRMarksSet*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr DMRAffine2D::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *DMRAffine2D::Class_Name()
{
   return "DMRAffine2D";
}

//______________________________________________________________________________
const char *DMRAffine2D::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::DMRAffine2D*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int DMRAffine2D::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::DMRAffine2D*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void DMRAffine2D::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::DMRAffine2D*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *DMRAffine2D::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::DMRAffine2D*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr DMRCluster::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *DMRCluster::Class_Name()
{
   return "DMRCluster";
}

//______________________________________________________________________________
const char *DMRCluster::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::DMRCluster*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int DMRCluster::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::DMRCluster*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void DMRCluster::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::DMRCluster*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *DMRCluster::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::DMRCluster*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr DMRView::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *DMRView::Class_Name()
{
   return "DMRView";
}

//______________________________________________________________________________
const char *DMRView::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::DMRView*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int DMRView::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::DMRView*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void DMRView::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::DMRView*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *DMRView::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::DMRView*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr DMRGrain::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *DMRGrain::Class_Name()
{
   return "DMRGrain";
}

//______________________________________________________________________________
const char *DMRGrain::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::DMRGrain*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int DMRGrain::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::DMRGrain*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void DMRGrain::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::DMRGrain*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *DMRGrain::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::DMRGrain*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr DMRImage::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *DMRImage::Class_Name()
{
   return "DMRImage";
}

//______________________________________________________________________________
const char *DMRImage::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::DMRImage*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int DMRImage::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::DMRImage*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void DMRImage::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::DMRImage*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *DMRImage::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::DMRImage*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr DMRImageCl::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *DMRImageCl::Class_Name()
{
   return "DMRImageCl";
}

//______________________________________________________________________________
const char *DMRImageCl::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::DMRImageCl*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int DMRImageCl::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::DMRImageCl*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void DMRImageCl::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::DMRImageCl*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *DMRImageCl::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::DMRImageCl*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr DMRFrame::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *DMRFrame::Class_Name()
{
   return "DMRFrame";
}

//______________________________________________________________________________
const char *DMRFrame::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::DMRFrame*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int DMRFrame::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::DMRFrame*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void DMRFrame::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::DMRFrame*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *DMRFrame::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::DMRFrame*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr DMRFrameRaw::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *DMRFrameRaw::Class_Name()
{
   return "DMRFrameRaw";
}

//______________________________________________________________________________
const char *DMRFrameRaw::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::DMRFrameRaw*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int DMRFrameRaw::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::DMRFrameRaw*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void DMRFrameRaw::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::DMRFrameRaw*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *DMRFrameRaw::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::DMRFrameRaw*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr DMRMicrotrack::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *DMRMicrotrack::Class_Name()
{
   return "DMRMicrotrack";
}

//______________________________________________________________________________
const char *DMRMicrotrack::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::DMRMicrotrack*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int DMRMicrotrack::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::DMRMicrotrack*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void DMRMicrotrack::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::DMRMicrotrack*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *DMRMicrotrack::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::DMRMicrotrack*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr DMRViewHeader::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *DMRViewHeader::Class_Name()
{
   return "DMRViewHeader";
}

//______________________________________________________________________________
const char *DMRViewHeader::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::DMRViewHeader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int DMRViewHeader::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::DMRViewHeader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void DMRViewHeader::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::DMRViewHeader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *DMRViewHeader::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::DMRViewHeader*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr DMRRun::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *DMRRun::Class_Name()
{
   return "DMRRun";
}

//______________________________________________________________________________
const char *DMRRun::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::DMRRun*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int DMRRun::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::DMRRun*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void DMRRun::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::DMRRun*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *DMRRun::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::DMRRun*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr DMRRunHeader::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *DMRRunHeader::Class_Name()
{
   return "DMRRunHeader";
}

//______________________________________________________________________________
const char *DMRRunHeader::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::DMRRunHeader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int DMRRunHeader::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::DMRRunHeader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void DMRRunHeader::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::DMRRunHeader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *DMRRunHeader::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::DMRRunHeader*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr DMRTextFile::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *DMRTextFile::Class_Name()
{
   return "DMRTextFile";
}

//______________________________________________________________________________
const char *DMRTextFile::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::DMRTextFile*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int DMRTextFile::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::DMRTextFile*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void DMRTextFile::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::DMRTextFile*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *DMRTextFile::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::DMRTextFile*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr DMRFiducialMark::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *DMRFiducialMark::Class_Name()
{
   return "DMRFiducialMark";
}

//______________________________________________________________________________
const char *DMRFiducialMark::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::DMRFiducialMark*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int DMRFiducialMark::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::DMRFiducialMark*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void DMRFiducialMark::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::DMRFiducialMark*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *DMRFiducialMark::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::DMRFiducialMark*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr DMRMarksSet::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *DMRMarksSet::Class_Name()
{
   return "DMRMarksSet";
}

//______________________________________________________________________________
const char *DMRMarksSet::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::DMRMarksSet*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int DMRMarksSet::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::DMRMarksSet*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void DMRMarksSet::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::DMRMarksSet*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *DMRMarksSet::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::DMRMarksSet*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void DMRAffine2D::Streamer(TBuffer &R__b)
{
   // Stream an object of class DMRAffine2D.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> a11;
      R__b >> a12;
      R__b >> a21;
      R__b >> a22;
      R__b >> b1;
      R__b >> b2;
      R__b.CheckByteCount(R__s, R__c, DMRAffine2D::IsA());
   } else {
      R__c = R__b.WriteVersion(DMRAffine2D::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << a11;
      R__b << a12;
      R__b << a21;
      R__b << a22;
      R__b << b1;
      R__b << b2;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void DMRAffine2D::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class DMRAffine2D.
      TClass *R__cl = ::DMRAffine2D::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "a11", &a11);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "a12", &a12);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "a21", &a21);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "a22", &a22);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "b1", &b1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "b2", &b2);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_DMRAffine2D(void *p) {
      return  p ? new(p) ::DMRAffine2D : new ::DMRAffine2D;
   }
   static void *newArray_DMRAffine2D(Long_t nElements, void *p) {
      return p ? new(p) ::DMRAffine2D[nElements] : new ::DMRAffine2D[nElements];
   }
   // Wrapper around operator delete
   static void delete_DMRAffine2D(void *p) {
      delete ((::DMRAffine2D*)p);
   }
   static void deleteArray_DMRAffine2D(void *p) {
      delete [] ((::DMRAffine2D*)p);
   }
   static void destruct_DMRAffine2D(void *p) {
      typedef ::DMRAffine2D current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_DMRAffine2D(TBuffer &buf, void *obj) {
      ((::DMRAffine2D*)obj)->::DMRAffine2D::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::DMRAffine2D

//______________________________________________________________________________
void DMRCluster::Streamer(TBuffer &R__b)
{
   // Stream an object of class DMRCluster.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> id;
      R__b >> id_f;
      R__b >> icp;
      R__b >> flags;
      R__b >> x;
      R__b >> y;
      R__b >> z;
      R__b >> lx;
      R__b >> ly;
      R__b >> phi;
      R__b >> gh;
      R__b >> gb;
      R__b >> gq;
      R__b >> npx;
      R__b >> vol;
      R__b >> pol;
      R__b >> ipol;
      R__b >> color;
      R__b >> img;
      R__b >> ifr;
      R__b >> igr;
      R__b >> imt;
      R__b >> is_nt;
      R__b.CheckByteCount(R__s, R__c, DMRCluster::IsA());
   } else {
      R__c = R__b.WriteVersion(DMRCluster::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << id;
      R__b << id_f;
      R__b << icp;
      R__b << flags;
      R__b << x;
      R__b << y;
      R__b << z;
      R__b << lx;
      R__b << ly;
      R__b << phi;
      R__b << gh;
      R__b << gb;
      R__b << gq;
      R__b << npx;
      R__b << vol;
      R__b << pol;
      R__b << ipol;
      R__b << color;
      R__b << img;
      R__b << ifr;
      R__b << igr;
      R__b << imt;
      R__b << is_nt;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void DMRCluster::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class DMRCluster.
      TClass *R__cl = ::DMRCluster::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "id", &id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "id_f", &id_f);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "icp", &icp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "flags", &flags);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x", &x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y", &y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z", &z);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lx", &lx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ly", &ly);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi", &phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gh", &gh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gb", &gb);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gq", &gq);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "npx", &npx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vol", &vol);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pol", &pol);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ipol", &ipol);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "color", &color);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "img", &img);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ifr", &ifr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "igr", &igr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "imt", &imt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "is_nt", &is_nt);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_DMRCluster(void *p) {
      return  p ? new(p) ::DMRCluster : new ::DMRCluster;
   }
   static void *newArray_DMRCluster(Long_t nElements, void *p) {
      return p ? new(p) ::DMRCluster[nElements] : new ::DMRCluster[nElements];
   }
   // Wrapper around operator delete
   static void delete_DMRCluster(void *p) {
      delete ((::DMRCluster*)p);
   }
   static void deleteArray_DMRCluster(void *p) {
      delete [] ((::DMRCluster*)p);
   }
   static void destruct_DMRCluster(void *p) {
      typedef ::DMRCluster current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_DMRCluster(TBuffer &buf, void *obj) {
      ((::DMRCluster*)obj)->::DMRCluster::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::DMRCluster

//______________________________________________________________________________
void DMRGrain::Streamer(TBuffer &R__b)
{
   // Stream an object of class DMRGrain.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> id;
      R__b >> icp;
      R__b >> flags;
      R__b >> x;
      R__b >> y;
      R__b >> z;
      R__b >> ncl;
      R__b >> npx;
      R__b >> vol;
      R__b >> lx;
      R__b >> ly;
      R__b >> lz;
      R__b >> phi;
      R__b >> theta;
      R__b >> frFirst;
      R__b >> frLast;
      R__b >> pol;
      R__b >> ipol;
      R__b >> ibfc;
      R__b >> imt;
      R__b >> ipt;
      R__b >> is_nt;
      R__b.CheckByteCount(R__s, R__c, DMRGrain::IsA());
   } else {
      R__c = R__b.WriteVersion(DMRGrain::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << id;
      R__b << icp;
      R__b << flags;
      R__b << x;
      R__b << y;
      R__b << z;
      R__b << ncl;
      R__b << npx;
      R__b << vol;
      R__b << lx;
      R__b << ly;
      R__b << lz;
      R__b << phi;
      R__b << theta;
      R__b << frFirst;
      R__b << frLast;
      R__b << pol;
      R__b << ipol;
      R__b << ibfc;
      R__b << imt;
      R__b << ipt;
      R__b << is_nt;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void DMRGrain::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class DMRGrain.
      TClass *R__cl = ::DMRGrain::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "id", &id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "icp", &icp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "flags", &flags);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x", &x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y", &y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z", &z);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ncl", &ncl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "npx", &npx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vol", &vol);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lx", &lx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ly", &ly);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lz", &lz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi", &phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "theta", &theta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "frFirst", &frFirst);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "frLast", &frLast);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pol", &pol);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ipol", &ipol);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ibfc", &ibfc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "imt", &imt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ipt", &ipt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "is_nt", &is_nt);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_DMRGrain(void *p) {
      return  p ? new(p) ::DMRGrain : new ::DMRGrain;
   }
   static void *newArray_DMRGrain(Long_t nElements, void *p) {
      return p ? new(p) ::DMRGrain[nElements] : new ::DMRGrain[nElements];
   }
   // Wrapper around operator delete
   static void delete_DMRGrain(void *p) {
      delete ((::DMRGrain*)p);
   }
   static void deleteArray_DMRGrain(void *p) {
      delete [] ((::DMRGrain*)p);
   }
   static void destruct_DMRGrain(void *p) {
      typedef ::DMRGrain current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_DMRGrain(TBuffer &buf, void *obj) {
      ((::DMRGrain*)obj)->::DMRGrain::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::DMRGrain

//______________________________________________________________________________
void DMRMicrotrack::Streamer(TBuffer &R__b)
{
   // Stream an object of class DMRMicrotrack.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> id;
      R__b >> flags;
      R__b >> ncl;
      R__b >> ngr;
      R__b >> frFirst;
      R__b >> frLast;
      R__b >> frTrig;
      R__b >> npx;
      R__b >> vol;
      R__b >> limX0;
      R__b >> limY0;
      R__b >> limZ0;
      R__b >> limX1;
      R__b >> limY1;
      R__b >> limZ1;
      R__b >> x;
      R__b >> y;
      R__b >> z;
      R__b >> phi;
      R__b >> theta;
      R__b >> sigX;
      R__b >> sigY;
      R__b >> sigZ;
      R__b >> sigPhi;
      R__b >> sigTheta;
      R__b >> chi2;
      R__b >> len;
      R__b >> score;
      R__b >> is_pt;
      R__b.CheckByteCount(R__s, R__c, DMRMicrotrack::IsA());
   } else {
      R__c = R__b.WriteVersion(DMRMicrotrack::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << id;
      R__b << flags;
      R__b << ncl;
      R__b << ngr;
      R__b << frFirst;
      R__b << frLast;
      R__b << frTrig;
      R__b << npx;
      R__b << vol;
      R__b << limX0;
      R__b << limY0;
      R__b << limZ0;
      R__b << limX1;
      R__b << limY1;
      R__b << limZ1;
      R__b << x;
      R__b << y;
      R__b << z;
      R__b << phi;
      R__b << theta;
      R__b << sigX;
      R__b << sigY;
      R__b << sigZ;
      R__b << sigPhi;
      R__b << sigTheta;
      R__b << chi2;
      R__b << len;
      R__b << score;
      R__b << is_pt;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void DMRMicrotrack::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class DMRMicrotrack.
      TClass *R__cl = ::DMRMicrotrack::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "id", &id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "flags", &flags);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ncl", &ncl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ngr", &ngr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "frFirst", &frFirst);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "frLast", &frLast);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "frTrig", &frTrig);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "npx", &npx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vol", &vol);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "limX0", &limX0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "limY0", &limY0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "limZ0", &limZ0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "limX1", &limX1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "limY1", &limY1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "limZ1", &limZ1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x", &x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y", &y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z", &z);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi", &phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "theta", &theta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigX", &sigX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigY", &sigY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigZ", &sigZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigPhi", &sigPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigTheta", &sigTheta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chi2", &chi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "len", &len);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "score", &score);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "is_pt", &is_pt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*grains", &grains);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_DMRMicrotrack(void *p) {
      return  p ? new(p) ::DMRMicrotrack : new ::DMRMicrotrack;
   }
   static void *newArray_DMRMicrotrack(Long_t nElements, void *p) {
      return p ? new(p) ::DMRMicrotrack[nElements] : new ::DMRMicrotrack[nElements];
   }
   // Wrapper around operator delete
   static void delete_DMRMicrotrack(void *p) {
      delete ((::DMRMicrotrack*)p);
   }
   static void deleteArray_DMRMicrotrack(void *p) {
      delete [] ((::DMRMicrotrack*)p);
   }
   static void destruct_DMRMicrotrack(void *p) {
      typedef ::DMRMicrotrack current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_DMRMicrotrack(TBuffer &buf, void *obj) {
      ((::DMRMicrotrack*)obj)->::DMRMicrotrack::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::DMRMicrotrack

//______________________________________________________________________________
void DMRImage::Streamer(TBuffer &R__b)
{
   // Stream an object of class DMRImage.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> cols;
      R__b >> rows;
      R__b >> sensor;
      R__b >> color;
      R__b >> pol;
      R__b >> ipol;
      R__b >> npx;
      R__b >> pxvol;
      R__b >> ll;
      R__b >> thres;
      R__b >> flags;
      R__b >> eImg;
      R__b.CheckByteCount(R__s, R__c, DMRImage::IsA());
   } else {
      R__c = R__b.WriteVersion(DMRImage::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << cols;
      R__b << rows;
      R__b << sensor;
      R__b << color;
      R__b << pol;
      R__b << ipol;
      R__b << npx;
      R__b << pxvol;
      R__b << ll;
      R__b << thres;
      R__b << flags;
      R__b << eImg;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void DMRImage::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class DMRImage.
      TClass *R__cl = ::DMRImage::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cols", &cols);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rows", &rows);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sensor", &sensor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "color", &color);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pol", &pol);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ipol", &ipol);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "npx", &npx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pxvol", &pxvol);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ll", &ll);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "thres", &thres);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "flags", &flags);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eImg", &eImg);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_DMRImage(void *p) {
      return  p ? new(p) ::DMRImage : new ::DMRImage;
   }
   static void *newArray_DMRImage(Long_t nElements, void *p) {
      return p ? new(p) ::DMRImage[nElements] : new ::DMRImage[nElements];
   }
   // Wrapper around operator delete
   static void delete_DMRImage(void *p) {
      delete ((::DMRImage*)p);
   }
   static void deleteArray_DMRImage(void *p) {
      delete [] ((::DMRImage*)p);
   }
   static void destruct_DMRImage(void *p) {
      typedef ::DMRImage current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_DMRImage(TBuffer &buf, void *obj) {
      ((::DMRImage*)obj)->::DMRImage::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::DMRImage

//______________________________________________________________________________
void DMRImageCl::Streamer(TBuffer &R__b)
{
   // Stream an object of class DMRImageCl.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      DMRImage::Streamer(R__b);
      R__b >> id;
      R__b >> x;
      R__b >> y;
      R__b >> icl;
      R__b >> ifr;
      R__b.CheckByteCount(R__s, R__c, DMRImageCl::IsA());
   } else {
      R__c = R__b.WriteVersion(DMRImageCl::IsA(), kTRUE);
      DMRImage::Streamer(R__b);
      R__b << id;
      R__b << x;
      R__b << y;
      R__b << icl;
      R__b << ifr;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void DMRImageCl::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class DMRImageCl.
      TClass *R__cl = ::DMRImageCl::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "id", &id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x", &x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y", &y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "icl", &icl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ifr", &ifr);
      DMRImage::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_DMRImageCl(void *p) {
      return  p ? new(p) ::DMRImageCl : new ::DMRImageCl;
   }
   static void *newArray_DMRImageCl(Long_t nElements, void *p) {
      return p ? new(p) ::DMRImageCl[nElements] : new ::DMRImageCl[nElements];
   }
   // Wrapper around operator delete
   static void delete_DMRImageCl(void *p) {
      delete ((::DMRImageCl*)p);
   }
   static void deleteArray_DMRImageCl(void *p) {
      delete [] ((::DMRImageCl*)p);
   }
   static void destruct_DMRImageCl(void *p) {
      typedef ::DMRImageCl current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_DMRImageCl(TBuffer &buf, void *obj) {
      ((::DMRImageCl*)obj)->::DMRImageCl::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::DMRImageCl

//______________________________________________________________________________
void DMRFrame::Streamer(TBuffer &R__b)
{
   // Stream an object of class DMRFrame.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      DMRImage::Streamer(R__b);
      R__b >> id;
      R__b >> uid;
      R__b >> ix;
      R__b >> iy;
      R__b >> iz;
      R__b >> x;
      R__b >> y;
      R__b >> z;
      R__b >> time;
      R__b >> ncl;
      R__b.CheckByteCount(R__s, R__c, DMRFrame::IsA());
   } else {
      R__c = R__b.WriteVersion(DMRFrame::IsA(), kTRUE);
      DMRImage::Streamer(R__b);
      R__b << id;
      R__b << uid;
      R__b << ix;
      R__b << iy;
      R__b << iz;
      R__b << x;
      R__b << y;
      R__b << z;
      R__b << time;
      R__b << ncl;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void DMRFrame::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class DMRFrame.
      TClass *R__cl = ::DMRFrame::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "id", &id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "uid", &uid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ix", &ix);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iy", &iy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iz", &iz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x", &x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y", &y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z", &z);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time", &time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ncl", &ncl);
      DMRImage::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_DMRFrame(void *p) {
      return  p ? new(p) ::DMRFrame : new ::DMRFrame;
   }
   static void *newArray_DMRFrame(Long_t nElements, void *p) {
      return p ? new(p) ::DMRFrame[nElements] : new ::DMRFrame[nElements];
   }
   // Wrapper around operator delete
   static void delete_DMRFrame(void *p) {
      delete ((::DMRFrame*)p);
   }
   static void deleteArray_DMRFrame(void *p) {
      delete [] ((::DMRFrame*)p);
   }
   static void destruct_DMRFrame(void *p) {
      typedef ::DMRFrame current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_DMRFrame(TBuffer &buf, void *obj) {
      ((::DMRFrame*)obj)->::DMRFrame::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::DMRFrame

//______________________________________________________________________________
void DMRFrameRaw::Streamer(TBuffer &R__b)
{
   // Stream an object of class DMRFrameRaw.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      DMRFrame::Streamer(R__b);
      R__b >> ventr;
      R__b >> vid;
      R__b >> aid;
      R__b >> col;
      R__b >> row;
      R__b >> side;
      R__b.CheckByteCount(R__s, R__c, DMRFrameRaw::IsA());
   } else {
      R__c = R__b.WriteVersion(DMRFrameRaw::IsA(), kTRUE);
      DMRFrame::Streamer(R__b);
      R__b << ventr;
      R__b << vid;
      R__b << aid;
      R__b << col;
      R__b << row;
      R__b << side;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void DMRFrameRaw::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class DMRFrameRaw.
      TClass *R__cl = ::DMRFrameRaw::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ventr", &ventr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vid", &vid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "aid", &aid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "col", &col);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "row", &row);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "side", &side);
      DMRFrame::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_DMRFrameRaw(void *p) {
      return  p ? new(p) ::DMRFrameRaw : new ::DMRFrameRaw;
   }
   static void *newArray_DMRFrameRaw(Long_t nElements, void *p) {
      return p ? new(p) ::DMRFrameRaw[nElements] : new ::DMRFrameRaw[nElements];
   }
   // Wrapper around operator delete
   static void delete_DMRFrameRaw(void *p) {
      delete ((::DMRFrameRaw*)p);
   }
   static void deleteArray_DMRFrameRaw(void *p) {
      delete [] ((::DMRFrameRaw*)p);
   }
   static void destruct_DMRFrameRaw(void *p) {
      typedef ::DMRFrameRaw current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_DMRFrameRaw(TBuffer &buf, void *obj) {
      ((::DMRFrameRaw*)obj)->::DMRFrameRaw::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::DMRFrameRaw

//______________________________________________________________________________
void DMRView::Streamer(TBuffer &R__b)
{
   // Stream an object of class DMRView.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> HD;
      CL->Streamer(R__b);
      GR->Streamer(R__b);
      MT->Streamer(R__b);
      IM->Streamer(R__b);
      FR->Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, DMRView::IsA());
   } else {
      R__c = R__b.WriteVersion(DMRView::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << HD;
      CL->Streamer(R__b);
      GR->Streamer(R__b);
      MT->Streamer(R__b);
      IM->Streamer(R__b);
      FR->Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void DMRView::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class DMRView.
      TClass *R__cl = ::DMRView::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*HD", &HD);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*CL", &CL);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*GR", &GR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*MT", &MT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*IM", &IM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*FR", &FR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "redHD", &redHD);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "redCL", &redCL);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "redGR", &redGR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "redMT", &redMT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "redIM", &redIM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "redFR", &redFR);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_DMRView(void *p) {
      return  p ? new(p) ::DMRView : new ::DMRView;
   }
   static void *newArray_DMRView(Long_t nElements, void *p) {
      return p ? new(p) ::DMRView[nElements] : new ::DMRView[nElements];
   }
   // Wrapper around operator delete
   static void delete_DMRView(void *p) {
      delete ((::DMRView*)p);
   }
   static void deleteArray_DMRView(void *p) {
      delete [] ((::DMRView*)p);
   }
   static void destruct_DMRView(void *p) {
      typedef ::DMRView current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_DMRView(TBuffer &buf, void *obj) {
      ((::DMRView*)obj)->::DMRView::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::DMRView

//______________________________________________________________________________
void DMRViewHeader::Streamer(TBuffer &R__b)
{
   // Stream an object of class DMRViewHeader.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> id;
      R__b >> vid;
      R__b >> aid;
      R__b >> col;
      R__b >> row;
      R__b >> flag;
      R__b >> side;
      R__b >> x;
      R__b >> y;
      R__b >> z;
      R__b >> rmax;
      R__b >> xmin;
      R__b >> xmax;
      R__b >> ymin;
      R__b >> ymax;
      R__b >> zmin;
      R__b >> zmax;
      zlayers.Streamer(R__b);
      polsteps.Streamer(R__b);
      R__b >> ncl;
      R__b >> ngr;
      R__b >> nmt;
      R__b >> nim;
      R__b >> nfr;
      R__b >> track;
      R__b >> event;
      R__b >> time;
      aff.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, DMRViewHeader::IsA());
   } else {
      R__c = R__b.WriteVersion(DMRViewHeader::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << id;
      R__b << vid;
      R__b << aid;
      R__b << col;
      R__b << row;
      R__b << flag;
      R__b << side;
      R__b << x;
      R__b << y;
      R__b << z;
      R__b << rmax;
      R__b << xmin;
      R__b << xmax;
      R__b << ymin;
      R__b << ymax;
      R__b << zmin;
      R__b << zmax;
      zlayers.Streamer(R__b);
      polsteps.Streamer(R__b);
      R__b << ncl;
      R__b << ngr;
      R__b << nmt;
      R__b << nim;
      R__b << nfr;
      R__b << track;
      R__b << event;
      R__b << time;
      aff.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void DMRViewHeader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class DMRViewHeader.
      TClass *R__cl = ::DMRViewHeader::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "id", &id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vid", &vid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "aid", &aid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "col", &col);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "row", &row);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "flag", &flag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "side", &side);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x", &x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y", &y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z", &z);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rmax", &rmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xmin", &xmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xmax", &xmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ymin", &ymin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ymax", &ymax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zmin", &zmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zmax", &zmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zlayers", &zlayers);
      R__insp.InspectMember(zlayers, "zlayers.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "polsteps", &polsteps);
      R__insp.InspectMember(polsteps, "polsteps.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ncl", &ncl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ngr", &ngr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nmt", &nmt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nim", &nim);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nfr", &nfr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "track", &track);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "event", &event);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time", &time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "aff", &aff);
      R__insp.InspectMember(aff, "aff.");
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_DMRViewHeader(void *p) {
      return  p ? new(p) ::DMRViewHeader : new ::DMRViewHeader;
   }
   static void *newArray_DMRViewHeader(Long_t nElements, void *p) {
      return p ? new(p) ::DMRViewHeader[nElements] : new ::DMRViewHeader[nElements];
   }
   // Wrapper around operator delete
   static void delete_DMRViewHeader(void *p) {
      delete ((::DMRViewHeader*)p);
   }
   static void deleteArray_DMRViewHeader(void *p) {
      delete [] ((::DMRViewHeader*)p);
   }
   static void destruct_DMRViewHeader(void *p) {
      typedef ::DMRViewHeader current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_DMRViewHeader(TBuffer &buf, void *obj) {
      ((::DMRViewHeader*)obj)->::DMRViewHeader::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::DMRViewHeader

//______________________________________________________________________________
void DMRRun::Streamer(TBuffer &R__b)
{
   // Stream an object of class DMRRun.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> eHeader;
      R__b >> eView;
      R__b >> eTree;
      R__b >> eFile;
      ePath.Streamer(R__b);
      R__b >> eViewAlign;
      R__b >> eFrameAlign;
      R__b.StreamObject(&(eVA),typeid(AlignmentParView));
      R__b.StreamObject(&(eFA),typeid(AlignmentParFrame));
      R__b >> eVH1;
      R__b >> eVH2;
      R__b >> eFrames;
      R__b >> eFrameRaw;
      R__b >> eFixEncoderFaults;
      R__b.CheckByteCount(R__s, R__c, DMRRun::IsA());
   } else {
      R__c = R__b.WriteVersion(DMRRun::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << eHeader;
      R__b << eView;
      R__b << eTree;
      R__b << eFile;
      ePath.Streamer(R__b);
      R__b << eViewAlign;
      R__b << eFrameAlign;
      R__b.StreamObject(&(eVA),typeid(AlignmentParView));
      R__b.StreamObject(&(eFA),typeid(AlignmentParFrame));
      R__b << eVH1;
      R__b << eVH2;
      R__b << eFrames;
      R__b << eFrameRaw;
      R__b << eFixEncoderFaults;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void DMRRun::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class DMRRun.
      TClass *R__cl = ::DMRRun::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eHeader", &eHeader);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eView", &eView);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eTree", &eTree);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eFile", &eFile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ePath", &ePath);
      R__insp.InspectMember(ePath, "ePath.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eViewAlign", &eViewAlign);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eFrameAlign", &eFrameAlign);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eVA", (void*)&eVA);
      R__insp.InspectMember("AlignmentParView", (void*)&eVA, "eVA.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eFA", (void*)&eFA);
      R__insp.InspectMember("AlignmentParFrame", (void*)&eFA, "eFA.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eVH1", &eVH1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eVH2", &eVH2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eFrames", &eFrames);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eFrameRaw", &eFrameRaw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eFixEncoderFaults", &eFixEncoderFaults);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_DMRRun(void *p) {
      return  p ? new(p) ::DMRRun : new ::DMRRun;
   }
   static void *newArray_DMRRun(Long_t nElements, void *p) {
      return p ? new(p) ::DMRRun[nElements] : new ::DMRRun[nElements];
   }
   // Wrapper around operator delete
   static void delete_DMRRun(void *p) {
      delete ((::DMRRun*)p);
   }
   static void deleteArray_DMRRun(void *p) {
      delete [] ((::DMRRun*)p);
   }
   static void destruct_DMRRun(void *p) {
      typedef ::DMRRun current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_DMRRun(TBuffer &buf, void *obj) {
      ((::DMRRun*)obj)->::DMRRun::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::DMRRun

//______________________________________________________________________________
void DMRRunHeader::Streamer(TBuffer &R__b)
{
   // Stream an object of class DMRRunHeader.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> id;
      R__b.ReadStaticArray((int*)flags);
      startTime.Streamer(R__b);
      R__b >> startTimeSys;
      R__b >> nareas;
      comment.Streamer(R__b);
      R__b >> plateID;
      R__b >> hUp;
      R__b >> hBase;
      R__b >> hDown;
      R__b >> shrinkageUp;
      R__b >> shrinkageDown;
      R__b >> npixX;
      R__b >> npixY;
      R__b >> pixX;
      R__b >> pixY;
      R__b.CheckByteCount(R__s, R__c, DMRRunHeader::IsA());
   } else {
      R__c = R__b.WriteVersion(DMRRunHeader::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << id;
      R__b.WriteArray(flags, 20);
      startTime.Streamer(R__b);
      R__b << startTimeSys;
      R__b << nareas;
      comment.Streamer(R__b);
      R__b << plateID;
      R__b << hUp;
      R__b << hBase;
      R__b << hDown;
      R__b << shrinkageUp;
      R__b << shrinkageDown;
      R__b << npixX;
      R__b << npixY;
      R__b << pixX;
      R__b << pixY;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void DMRRunHeader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class DMRRunHeader.
      TClass *R__cl = ::DMRRunHeader::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "id", &id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "flags[20]", flags);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "startTime", &startTime);
      R__insp.InspectMember(startTime, "startTime.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "startTimeSys", &startTimeSys);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nareas", &nareas);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "comment", &comment);
      R__insp.InspectMember(comment, "comment.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "plateID", &plateID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hUp", &hUp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hBase", &hBase);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hDown", &hDown);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "shrinkageUp", &shrinkageUp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "shrinkageDown", &shrinkageDown);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "npixX", &npixX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "npixY", &npixY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pixX", &pixX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pixY", &pixY);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_DMRRunHeader(void *p) {
      return  p ? new(p) ::DMRRunHeader : new ::DMRRunHeader;
   }
   static void *newArray_DMRRunHeader(Long_t nElements, void *p) {
      return p ? new(p) ::DMRRunHeader[nElements] : new ::DMRRunHeader[nElements];
   }
   // Wrapper around operator delete
   static void delete_DMRRunHeader(void *p) {
      delete ((::DMRRunHeader*)p);
   }
   static void deleteArray_DMRRunHeader(void *p) {
      delete [] ((::DMRRunHeader*)p);
   }
   static void destruct_DMRRunHeader(void *p) {
      typedef ::DMRRunHeader current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_DMRRunHeader(TBuffer &buf, void *obj) {
      ((::DMRRunHeader*)obj)->::DMRRunHeader::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::DMRRunHeader

//______________________________________________________________________________
void DMRTextFile::Streamer(TBuffer &R__b)
{
   // Stream an object of class DMRTextFile.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      { TString R__str; R__str.Streamer(R__b); originalname = R__str.Data(); }
      { TString R__str; R__str.Streamer(R__b); buffer = R__str.Data(); }
      R__b >> size;
      R__b.CheckByteCount(R__s, R__c, DMRTextFile::IsA());
   } else {
      R__c = R__b.WriteVersion(DMRTextFile::IsA(), kTRUE);
      TObject::Streamer(R__b);
      { TString R__str = originalname.c_str(); R__str.Streamer(R__b);}
      { TString R__str = buffer.c_str(); R__str.Streamer(R__b);}
      R__b << size;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void DMRTextFile::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class DMRTextFile.
      TClass *R__cl = ::DMRTextFile::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "originalname", (void*)&originalname);
      R__insp.InspectMember("string", (void*)&originalname, "originalname.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "buffer", (void*)&buffer);
      R__insp.InspectMember("string", (void*)&buffer, "buffer.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "size", &size);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_DMRTextFile(void *p) {
      return  p ? new(p) ::DMRTextFile : new ::DMRTextFile;
   }
   static void *newArray_DMRTextFile(Long_t nElements, void *p) {
      return p ? new(p) ::DMRTextFile[nElements] : new ::DMRTextFile[nElements];
   }
   // Wrapper around operator delete
   static void delete_DMRTextFile(void *p) {
      delete ((::DMRTextFile*)p);
   }
   static void deleteArray_DMRTextFile(void *p) {
      delete [] ((::DMRTextFile*)p);
   }
   static void destruct_DMRTextFile(void *p) {
      typedef ::DMRTextFile current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_DMRTextFile(TBuffer &buf, void *obj) {
      ((::DMRTextFile*)obj)->::DMRTextFile::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::DMRTextFile

//______________________________________________________________________________
void DMRFiducialMark::Streamer(TBuffer &R__b)
{
   // Stream an object of class DMRFiducialMark.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> id;
      R__b >> type;
      R__b >> x_abs;
      R__b >> y_abs;
      R__b >> x_msr;
      R__b >> y_msr;
      R__b >> is_found;
      R__b >> cnt;
      R__b.CheckByteCount(R__s, R__c, DMRFiducialMark::IsA());
   } else {
      R__c = R__b.WriteVersion(DMRFiducialMark::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << id;
      R__b << type;
      R__b << x_abs;
      R__b << y_abs;
      R__b << x_msr;
      R__b << y_msr;
      R__b << is_found;
      R__b << cnt;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void DMRFiducialMark::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class DMRFiducialMark.
      TClass *R__cl = ::DMRFiducialMark::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "id", &id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "type", &type);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x_abs", &x_abs);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y_abs", &y_abs);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x_msr", &x_msr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y_msr", &y_msr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "is_found", &is_found);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cnt", &cnt);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_DMRFiducialMark(void *p) {
      return  p ? new(p) ::DMRFiducialMark : new ::DMRFiducialMark;
   }
   static void *newArray_DMRFiducialMark(Long_t nElements, void *p) {
      return p ? new(p) ::DMRFiducialMark[nElements] : new ::DMRFiducialMark[nElements];
   }
   // Wrapper around operator delete
   static void delete_DMRFiducialMark(void *p) {
      delete ((::DMRFiducialMark*)p);
   }
   static void deleteArray_DMRFiducialMark(void *p) {
      delete [] ((::DMRFiducialMark*)p);
   }
   static void destruct_DMRFiducialMark(void *p) {
      typedef ::DMRFiducialMark current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_DMRFiducialMark(TBuffer &buf, void *obj) {
      ((::DMRFiducialMark*)obj)->::DMRFiducialMark::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::DMRFiducialMark

//______________________________________________________________________________
void DMRMarksSet::Streamer(TBuffer &R__b)
{
   // Stream an object of class DMRMarksSet.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      eMarks.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, DMRMarksSet::IsA());
   } else {
      R__c = R__b.WriteVersion(DMRMarksSet::IsA(), kTRUE);
      TObject::Streamer(R__b);
      eMarks.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void DMRMarksSet::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class DMRMarksSet.
      TClass *R__cl = ::DMRMarksSet::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eMarks", &eMarks);
      R__insp.InspectMember(eMarks, "eMarks.");
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_DMRMarksSet(void *p) {
      return  p ? new(p) ::DMRMarksSet : new ::DMRMarksSet;
   }
   static void *newArray_DMRMarksSet(Long_t nElements, void *p) {
      return p ? new(p) ::DMRMarksSet[nElements] : new ::DMRMarksSet[nElements];
   }
   // Wrapper around operator delete
   static void delete_DMRMarksSet(void *p) {
      delete ((::DMRMarksSet*)p);
   }
   static void deleteArray_DMRMarksSet(void *p) {
      delete [] ((::DMRMarksSet*)p);
   }
   static void destruct_DMRMarksSet(void *p) {
      typedef ::DMRMarksSet current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_DMRMarksSet(TBuffer &buf, void *obj) {
      ((::DMRMarksSet*)obj)->::DMRMarksSet::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::DMRMarksSet

/********************************************************
* DMRootCint.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableDMRootCint();

extern "C" void G__set_cpp_environmentDMRootCint() {
  G__cpp_reset_tagtableDMRootCint();
}
#include <new>
extern "C" int G__cpp_dllrevDMRootCint() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* DMRAffine2D */
static int G__DMRootCint_107_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DMRAffine2D* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DMRAffine2D[n];
     } else {
       p = new((void*) gvp) DMRAffine2D[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DMRAffine2D;
     } else {
       p = new((void*) gvp) DMRAffine2D;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DMRootCintLN_DMRAffine2D));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_107_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DMRAffine2D*) G__getstructoffset())->Set((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_107_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DMRAffine2D*) G__getstructoffset())->Set((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_107_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((DMRAffine2D*) G__getstructoffset())->X((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_107_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((DMRAffine2D*) G__getstructoffset())->Y((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_107_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DMRAffine2D*) G__getstructoffset())->Transform(*((DMRAffine2D*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_107_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DMRAffine2D*) G__getstructoffset())->Invert();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_107_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DMRAffine2D*) G__getstructoffset())->Rotate((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_107_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const DMRAffine2D*) G__getstructoffset())->AsString());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_107_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letint(result7, 105, (long) ((DMRAffine2D*) G__getstructoffset())->Calculate((int) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Double_t*) G__int(libp->para[3])
, (Double_t*) G__int(libp->para[4]), (int) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 105, (long) ((DMRAffine2D*) G__getstructoffset())->Calculate((int) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Double_t*) G__int(libp->para[3])
, (Double_t*) G__int(libp->para[4])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_107_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((DMRAffine2D*) G__getstructoffset())->CalculateFull((int) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Double_t*) G__int(libp->para[3])
, (Double_t*) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_107_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((DMRAffine2D*) G__getstructoffset())->CalculateTurn((int) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Double_t*) G__int(libp->para[3])
, (Double_t*) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_107_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const DMRAffine2D*) G__getstructoffset())->Phi((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_107_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) DMRAffine2D::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_107_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DMRAffine2D::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_107_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) DMRAffine2D::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_107_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      DMRAffine2D::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_107_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DMRAffine2D*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_107_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DMRAffine2D::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_107_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) DMRAffine2D::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_107_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DMRAffine2D::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_107_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) DMRAffine2D::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DMRootCint_107_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   DMRAffine2D* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new DMRAffine2D(*(DMRAffine2D*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DMRootCintLN_DMRAffine2D));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DMRAffine2D G__TDMRAffine2D;
static int G__DMRootCint_107_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DMRAffine2D*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DMRAffine2D*) (soff+(sizeof(DMRAffine2D)*i)))->~G__TDMRAffine2D();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DMRAffine2D*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DMRAffine2D*) (soff))->~G__TDMRAffine2D();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DMRootCint_107_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DMRAffine2D* dest = (DMRAffine2D*) G__getstructoffset();
   *dest = *(DMRAffine2D*) libp->para[0].ref;
   const DMRAffine2D& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DMRCluster */
static int G__DMRootCint_108_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DMRCluster* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DMRCluster[n];
     } else {
       p = new((void*) gvp) DMRCluster[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DMRCluster;
     } else {
       p = new((void*) gvp) DMRCluster;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DMRootCintLN_DMRCluster));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_108_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const DMRCluster*) G__getstructoffset())->ID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_108_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DMRCluster*) G__getstructoffset())->ToPixels((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_108_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) DMRCluster::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_108_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DMRCluster::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_108_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) DMRCluster::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_108_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      DMRCluster::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_108_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DMRCluster*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_108_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DMRCluster::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_108_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) DMRCluster::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_108_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DMRCluster::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_108_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) DMRCluster::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DMRootCint_108_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   DMRCluster* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new DMRCluster(*(DMRCluster*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DMRootCintLN_DMRCluster));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DMRCluster G__TDMRCluster;
static int G__DMRootCint_108_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DMRCluster*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DMRCluster*) (soff+(sizeof(DMRCluster)*i)))->~G__TDMRCluster();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DMRCluster*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DMRCluster*) (soff))->~G__TDMRCluster();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DMRootCint_108_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DMRCluster* dest = (DMRCluster*) G__getstructoffset();
   *dest = *(DMRCluster*) libp->para[0].ref;
   const DMRCluster& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DMRView */
static int G__DMRootCint_109_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DMRView* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DMRView[n];
     } else {
       p = new((void*) gvp) DMRView[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DMRView;
     } else {
       p = new((void*) gvp) DMRView;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DMRootCintLN_DMRView));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_109_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DMRView*) G__getstructoffset())->Clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_109_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((DMRView*) G__getstructoffset())->AddCluster());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_109_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((DMRView*) G__getstructoffset())->AddGrain());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_109_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((DMRView*) G__getstructoffset())->AddMicrotrack());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_109_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((DMRView*) G__getstructoffset())->AddImageCl());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_109_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((DMRView*) G__getstructoffset())->AddFrame());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_109_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const DMRView*) G__getstructoffset())->GetHD());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_109_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const DMRView*) G__getstructoffset())->GetCL((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_109_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const DMRView*) G__getstructoffset())->GetGR((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_109_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const DMRView*) G__getstructoffset())->GetMT((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_109_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const DMRView*) G__getstructoffset())->GetIM((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_109_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const DMRView*) G__getstructoffset())->GetFR((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_109_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const DMRView*) G__getstructoffset())->GetFR((Int_t) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_109_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const DMRView*) G__getstructoffset())->SamePol((float) G__double(libp->para[0]), (float) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_109_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((DMRView*) G__getstructoffset())->GetCLofGR((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_109_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((DMRView*) G__getstructoffset())->GetFrames((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_109_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((DMRView*) G__getstructoffset())->GetClusters((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (Int_t) G__int(libp->para[4]), (int) G__int(libp->para[5])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_109_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DMRView*) G__getstructoffset())->AddIM2FR((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_109_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((DMRView*) G__getstructoffset())->GetImageCl(*(DMRCluster*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_109_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DMRView*) G__getstructoffset())->FixEncoderFaults();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_109_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) DMRView::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_109_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DMRView::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_109_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) DMRView::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_109_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      DMRView::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_109_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DMRView*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_109_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DMRView::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_109_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) DMRView::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_109_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DMRView::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_109_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) DMRView::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DMRootCint_109_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   DMRView* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new DMRView(*(DMRView*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DMRootCintLN_DMRView));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DMRView G__TDMRView;
static int G__DMRootCint_109_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DMRView*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DMRView*) (soff+(sizeof(DMRView)*i)))->~G__TDMRView();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DMRView*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DMRView*) (soff))->~G__TDMRView();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DMRootCint_109_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DMRView* dest = (DMRView*) G__getstructoffset();
   *dest = *(DMRView*) libp->para[0].ref;
   const DMRView& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DMRGrain */
static int G__DMRootCint_111_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DMRGrain* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DMRGrain[n];
     } else {
       p = new((void*) gvp) DMRGrain[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DMRGrain;
     } else {
       p = new((void*) gvp) DMRGrain;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DMRootCintLN_DMRGrain));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_111_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const DMRGrain*) G__getstructoffset())->ID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_111_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) DMRGrain::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_111_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DMRGrain::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_111_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) DMRGrain::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_111_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      DMRGrain::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_111_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DMRGrain*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_111_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DMRGrain::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_111_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) DMRGrain::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_111_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DMRGrain::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_111_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) DMRGrain::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DMRootCint_111_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   DMRGrain* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new DMRGrain(*(DMRGrain*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DMRootCintLN_DMRGrain));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DMRGrain G__TDMRGrain;
static int G__DMRootCint_111_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DMRGrain*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DMRGrain*) (soff+(sizeof(DMRGrain)*i)))->~G__TDMRGrain();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DMRGrain*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DMRGrain*) (soff))->~G__TDMRGrain();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DMRootCint_111_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DMRGrain* dest = (DMRGrain*) G__getstructoffset();
   *dest = *(DMRGrain*) libp->para[0].ref;
   const DMRGrain& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DMRImage */
static int G__DMRootCint_116_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DMRImage* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DMRImage[n];
     } else {
       p = new((void*) gvp) DMRImage[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DMRImage;
     } else {
       p = new((void*) gvp) DMRImage;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DMRootCintLN_DMRImage));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_116_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 66, (long) ((const DMRImage*) G__getstructoffset())->GetImage());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_116_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 66, (long) ((DMRImage*) G__getstructoffset())->GetImage());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_116_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const DMRImage*) G__getstructoffset())->Npix());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_116_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DMRImage*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_116_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DMRImage*) G__getstructoffset())->SetImage((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (const Byte_t*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_116_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DMRImage*) G__getstructoffset())->SetImage((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_116_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) ((const DMRImage*) G__getstructoffset())->GetHist2((int) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((const DMRImage*) G__getstructoffset())->GetHist2());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_116_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const DMRImage*) G__getstructoffset())->I((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_116_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const DMRImage*) G__getstructoffset())->GetPixel((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_116_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const DMRImage*) G__getstructoffset())->GetPixel((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_116_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DMRImage*) G__getstructoffset())->SetPixel((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (Byte_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_116_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DMRImage*) G__getstructoffset())->RemovePixelNoise((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_116_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((DMRImage*) G__getstructoffset())->ReadImage((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_116_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DMRImage*) G__getstructoffset())->CalculateImageStatistics();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_116_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DMRImage*) G__getstructoffset())->Min(*(DMRImage*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_116_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DMRImage*) G__getstructoffset())->Max(*(DMRImage*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_116_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) DMRImage::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_116_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DMRImage::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_116_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) DMRImage::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_116_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      DMRImage::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_116_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DMRImage*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_116_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DMRImage::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_116_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) DMRImage::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_116_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DMRImage::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_116_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) DMRImage::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DMRImage G__TDMRImage;
static int G__DMRootCint_116_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DMRImage*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DMRImage*) (soff+(sizeof(DMRImage)*i)))->~G__TDMRImage();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DMRImage*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DMRImage*) (soff))->~G__TDMRImage();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DMRImageCl */
static int G__DMRootCint_118_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DMRImageCl* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DMRImageCl[n];
     } else {
       p = new((void*) gvp) DMRImageCl[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DMRImageCl;
     } else {
       p = new((void*) gvp) DMRImageCl;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DMRootCintLN_DMRImageCl));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_118_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const DMRImageCl*) G__getstructoffset())->ID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_118_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) ((const DMRImageCl*) G__getstructoffset())->GetHist2((int) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((const DMRImageCl*) G__getstructoffset())->GetHist2());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_118_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((DMRImageCl*) G__getstructoffset())->ExtractFragment((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_118_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) DMRImageCl::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_118_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DMRImageCl::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_118_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) DMRImageCl::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_118_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      DMRImageCl::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_118_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DMRImageCl*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_118_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DMRImageCl::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_118_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) DMRImageCl::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_118_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DMRImageCl::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_118_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) DMRImageCl::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DMRImageCl G__TDMRImageCl;
static int G__DMRootCint_118_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DMRImageCl*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DMRImageCl*) (soff+(sizeof(DMRImageCl)*i)))->~G__TDMRImageCl();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DMRImageCl*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DMRImageCl*) (soff))->~G__TDMRImageCl();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DMRFrame */
static int G__DMRootCint_119_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DMRFrame* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DMRFrame[n];
     } else {
       p = new((void*) gvp) DMRFrame[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DMRFrame;
     } else {
       p = new((void*) gvp) DMRFrame;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DMRootCintLN_DMRFrame));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_119_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) ((const DMRFrame*) G__getstructoffset())->GetHist2((int) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((const DMRFrame*) G__getstructoffset())->GetHist2());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_119_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const DMRFrame*) G__getstructoffset())->ID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_119_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DMRFrame*) G__getstructoffset())->AddIM2FR(*(DMRImageCl*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_119_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((DMRFrame*) G__getstructoffset())->ExtractFragment((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_119_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) DMRFrame::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_119_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DMRFrame::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_119_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) DMRFrame::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_119_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      DMRFrame::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_119_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DMRFrame*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_119_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DMRFrame::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_119_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) DMRFrame::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_119_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DMRFrame::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_119_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) DMRFrame::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DMRFrame G__TDMRFrame;
static int G__DMRootCint_119_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DMRFrame*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DMRFrame*) (soff+(sizeof(DMRFrame)*i)))->~G__TDMRFrame();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DMRFrame*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DMRFrame*) (soff))->~G__TDMRFrame();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DMRFrameRaw */
static int G__DMRootCint_120_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DMRFrameRaw* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DMRFrameRaw[n];
     } else {
       p = new((void*) gvp) DMRFrameRaw[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DMRFrameRaw;
     } else {
       p = new((void*) gvp) DMRFrameRaw;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DMRootCintLN_DMRFrameRaw));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_120_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) DMRFrameRaw::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_120_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DMRFrameRaw::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_120_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) DMRFrameRaw::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_120_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      DMRFrameRaw::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_120_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DMRFrameRaw*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_120_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DMRFrameRaw::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_120_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) DMRFrameRaw::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_120_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DMRFrameRaw::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_120_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) DMRFrameRaw::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DMRFrameRaw G__TDMRFrameRaw;
static int G__DMRootCint_120_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DMRFrameRaw*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DMRFrameRaw*) (soff+(sizeof(DMRFrameRaw)*i)))->~G__TDMRFrameRaw();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DMRFrameRaw*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DMRFrameRaw*) (soff))->~G__TDMRFrameRaw();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DMRMicrotrack */
static int G__DMRootCint_148_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DMRMicrotrack* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DMRMicrotrack[n];
     } else {
       p = new((void*) gvp) DMRMicrotrack[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DMRMicrotrack;
     } else {
       p = new((void*) gvp) DMRMicrotrack;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DMRootCintLN_DMRMicrotrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_148_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const DMRMicrotrack*) G__getstructoffset())->ID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_148_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DMRMicrotrack*) G__getstructoffset())->MakeMicrotrack(*(TObjArray*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_148_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) DMRMicrotrack::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_148_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DMRMicrotrack::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_148_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) DMRMicrotrack::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_148_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      DMRMicrotrack::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_148_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DMRMicrotrack*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_148_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DMRMicrotrack::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_148_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) DMRMicrotrack::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_148_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DMRMicrotrack::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_148_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) DMRMicrotrack::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DMRootCint_148_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   DMRMicrotrack* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new DMRMicrotrack(*(DMRMicrotrack*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DMRootCintLN_DMRMicrotrack));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DMRMicrotrack G__TDMRMicrotrack;
static int G__DMRootCint_148_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DMRMicrotrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DMRMicrotrack*) (soff+(sizeof(DMRMicrotrack)*i)))->~G__TDMRMicrotrack();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DMRMicrotrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DMRMicrotrack*) (soff))->~G__TDMRMicrotrack();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DMRootCint_148_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DMRMicrotrack* dest = (DMRMicrotrack*) G__getstructoffset();
   *dest = *(DMRMicrotrack*) libp->para[0].ref;
   const DMRMicrotrack& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DMRViewHeader */
static int G__DMRootCint_151_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DMRViewHeader* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DMRViewHeader[n];
     } else {
       p = new((void*) gvp) DMRViewHeader[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DMRViewHeader;
     } else {
       p = new((void*) gvp) DMRViewHeader;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DMRootCintLN_DMRViewHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_151_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const DMRViewHeader*) G__getstructoffset())->ID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_151_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DMRViewHeader*) G__getstructoffset())->Set0();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_151_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) DMRViewHeader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_151_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DMRViewHeader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_151_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) DMRViewHeader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_151_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      DMRViewHeader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_151_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DMRViewHeader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_151_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DMRViewHeader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_151_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) DMRViewHeader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_151_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DMRViewHeader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_151_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) DMRViewHeader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DMRootCint_151_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   DMRViewHeader* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new DMRViewHeader(*(DMRViewHeader*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DMRootCintLN_DMRViewHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DMRViewHeader G__TDMRViewHeader;
static int G__DMRootCint_151_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DMRViewHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DMRViewHeader*) (soff+(sizeof(DMRViewHeader)*i)))->~G__TDMRViewHeader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DMRViewHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DMRViewHeader*) (soff))->~G__TDMRViewHeader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DMRootCint_151_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DMRViewHeader* dest = (DMRViewHeader*) G__getstructoffset();
   *dest = *(DMRViewHeader*) libp->para[0].ref;
   const DMRViewHeader& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DMRRun */
static int G__DMRootCint_152_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DMRRun* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DMRRun[n];
     } else {
       p = new((void*) gvp) DMRRun[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DMRRun;
     } else {
       p = new((void*) gvp) DMRRun;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DMRootCintLN_DMRRun));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_152_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DMRRun* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DMRRun((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) DMRRun((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DMRRun((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) DMRRun((const char*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DMRootCintLN_DMRRun));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_152_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DMRRun*) G__getstructoffset())->OpenExistingFile((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_152_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DMRRun*) G__getstructoffset())->OpenNewFile((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_152_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const DMRRun*) G__getstructoffset())->GetHeader());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_152_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const DMRRun*) G__getstructoffset())->GetView());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_152_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((DMRRun*) G__getstructoffset())->GetView());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_152_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const DMRRun*) G__getstructoffset())->GetTree());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_152_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DMRRun*) G__getstructoffset())->SetView((DMRView*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_152_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DMRRun*) G__getstructoffset())->SetView();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_152_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DMRRun*) G__getstructoffset())->SetFixEncoderFaults((bool) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_152_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DMRRun*) G__getstructoffset())->SetMaxFileSize((Long64_t) G__Longlong(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_152_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DMRRun*) G__getstructoffset())->AddView();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_152_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DMRRun*) G__getstructoffset())->AddView((DMRView*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_152_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DMRRun*) G__getstructoffset())->Close();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_152_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((DMRRun*) G__getstructoffset())->GetFile());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_152_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DMRRun*) G__getstructoffset())->AddTextFile((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_152_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 7:
      G__letint(result7, 85, (long) ((DMRRun*) G__getstructoffset())->GetEntry(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (int) G__int(libp->para[5])
, (int) G__int(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 85, (long) ((DMRRun*) G__getstructoffset())->GetEntry((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (int) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 85, (long) ((DMRRun*) G__getstructoffset())->GetEntry((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) ((DMRRun*) G__getstructoffset())->GetEntry((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) ((DMRRun*) G__getstructoffset())->GetEntry((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) ((DMRRun*) G__getstructoffset())->GetEntry((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((DMRRun*) G__getstructoffset())->GetEntry((int) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_152_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DMRRun*) G__getstructoffset())->AddViewAlign(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7])
, (Float_t) G__double(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Int_t) G__int(libp->para[10]), (Int_t) G__int(libp->para[11])
, (Int_t) G__int(libp->para[12]), (Int_t) G__int(libp->para[13])
, (Int_t) G__int(libp->para[14]), (Int_t) G__int(libp->para[15])
, *(DMRViewHeader*) libp->para[16].ref, *(DMRViewHeader*) libp->para[17].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_152_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DMRRun*) G__getstructoffset())->AddFrameAlign(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7])
, (Float_t) G__double(libp->para[8]), (Float_t) G__double(libp->para[9])
, (Float_t) G__double(libp->para[10]), (Int_t) G__int(libp->para[11])
, (Int_t) G__int(libp->para[12]), (Int_t) G__int(libp->para[13])
, (Int_t) G__int(libp->para[14]), (Int_t) G__int(libp->para[15])
, (Int_t) G__int(libp->para[16]), (Int_t) G__int(libp->para[17]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_152_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DMRRun*) G__getstructoffset())->AddFrameRaw();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_152_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((DMRRun*) G__getstructoffset())->SetFrames());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_152_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const DMRRun*) G__getstructoffset())->GetFrameRaw());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_152_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((DMRRun*) G__getstructoffset())->GetFrameRaw((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_152_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((DMRRun*) G__getstructoffset())->GetFrameRaw((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_152_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((DMRRun*) G__getstructoffset())->GetImagesCl((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (int) G__int(libp->para[4]), (int) G__int(libp->para[5])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_152_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((DMRRun*) G__getstructoffset())->GetGRIM((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_152_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((DMRRun*) G__getstructoffset())->GetGRIMBFC((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (int) G__int(libp->para[5])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_152_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((DMRRun*) G__getstructoffset())->GetCLIM((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_152_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((DMRRun*) G__getstructoffset())->GetCLIMBFC((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (int) G__int(libp->para[5])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_152_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((DMRRun*) G__getstructoffset())->GetGRCLs((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_152_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((DMRRun*) G__getstructoffset())->GetCLCLs((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_152_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) DMRRun::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_152_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DMRRun::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_152_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) DMRRun::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_152_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      DMRRun::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_152_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DMRRun*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_152_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DMRRun::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_152_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) DMRRun::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_152_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DMRRun::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_152_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) DMRRun::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DMRootCint_152_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   DMRRun* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new DMRRun(*(DMRRun*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DMRootCintLN_DMRRun));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DMRRun G__TDMRRun;
static int G__DMRootCint_152_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DMRRun*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DMRRun*) (soff+(sizeof(DMRRun)*i)))->~G__TDMRRun();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DMRRun*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DMRRun*) (soff))->~G__TDMRRun();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DMRootCint_152_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DMRRun* dest = (DMRRun*) G__getstructoffset();
   *dest = *(DMRRun*) libp->para[0].ref;
   const DMRRun& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DMRRunHeader */
static int G__DMRootCint_260_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DMRRunHeader* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DMRRunHeader[n];
     } else {
       p = new((void*) gvp) DMRRunHeader[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DMRRunHeader;
     } else {
       p = new((void*) gvp) DMRRunHeader;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DMRootCintLN_DMRRunHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_260_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DMRRunHeader*) G__getstructoffset())->SetMatrix((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_260_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DMRRunHeader*) G__getstructoffset())->Set0();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_260_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DMRRunHeader*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_260_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) DMRRunHeader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_260_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DMRRunHeader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_260_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) DMRRunHeader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_260_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      DMRRunHeader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_260_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DMRRunHeader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_260_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DMRRunHeader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_260_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) DMRRunHeader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_260_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DMRRunHeader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_260_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) DMRRunHeader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DMRootCint_260_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   DMRRunHeader* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new DMRRunHeader(*(DMRRunHeader*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DMRootCintLN_DMRRunHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DMRRunHeader G__TDMRRunHeader;
static int G__DMRootCint_260_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DMRRunHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DMRRunHeader*) (soff+(sizeof(DMRRunHeader)*i)))->~G__TDMRRunHeader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DMRRunHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DMRRunHeader*) (soff))->~G__TDMRRunHeader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DMRootCint_260_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DMRRunHeader* dest = (DMRRunHeader*) G__getstructoffset();
   *dest = *(DMRRunHeader*) libp->para[0].ref;
   const DMRRunHeader& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DMRTextFile */
static int G__DMRootCint_263_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DMRTextFile* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DMRTextFile[n];
     } else {
       p = new((void*) gvp) DMRTextFile[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DMRTextFile;
     } else {
       p = new((void*) gvp) DMRTextFile;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DMRootCintLN_DMRTextFile));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_263_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((DMRTextFile*) G__getstructoffset())->ReadFile((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_263_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 105, (long) ((DMRTextFile*) G__getstructoffset())->WriteFile((const char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((DMRTextFile*) G__getstructoffset())->WriteFile());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_263_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DMRTextFile*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_263_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) DMRTextFile::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_263_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DMRTextFile::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_263_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) DMRTextFile::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_263_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      DMRTextFile::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_263_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DMRTextFile*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_263_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DMRTextFile::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_263_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) DMRTextFile::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_263_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DMRTextFile::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_263_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) DMRTextFile::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DMRootCint_263_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   DMRTextFile* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new DMRTextFile(*(DMRTextFile*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DMRootCintLN_DMRTextFile));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DMRTextFile G__TDMRTextFile;
static int G__DMRootCint_263_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DMRTextFile*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DMRTextFile*) (soff+(sizeof(DMRTextFile)*i)))->~G__TDMRTextFile();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DMRTextFile*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DMRTextFile*) (soff))->~G__TDMRTextFile();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DMRootCint_263_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DMRTextFile* dest = (DMRTextFile*) G__getstructoffset();
   *dest = *(DMRTextFile*) libp->para[0].ref;
   const DMRTextFile& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DMRFiducialMark */
static int G__DMRootCint_264_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DMRFiducialMark* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DMRFiducialMark[n];
     } else {
       p = new((void*) gvp) DMRFiducialMark[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DMRFiducialMark;
     } else {
       p = new((void*) gvp) DMRFiducialMark;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DMRootCintLN_DMRFiducialMark));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_264_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((DMRFiducialMark*) G__getstructoffset())->Cnt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_264_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) DMRFiducialMark::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_264_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DMRFiducialMark::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_264_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) DMRFiducialMark::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_264_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      DMRFiducialMark::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_264_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DMRFiducialMark*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_264_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DMRFiducialMark::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_264_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) DMRFiducialMark::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_264_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DMRFiducialMark::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_264_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) DMRFiducialMark::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DMRootCint_264_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   DMRFiducialMark* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new DMRFiducialMark(*(DMRFiducialMark*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DMRootCintLN_DMRFiducialMark));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DMRFiducialMark G__TDMRFiducialMark;
static int G__DMRootCint_264_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DMRFiducialMark*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DMRFiducialMark*) (soff+(sizeof(DMRFiducialMark)*i)))->~G__TDMRFiducialMark();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DMRFiducialMark*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DMRFiducialMark*) (soff))->~G__TDMRFiducialMark();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DMRootCint_264_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DMRFiducialMark* dest = (DMRFiducialMark*) G__getstructoffset();
   *dest = *(DMRFiducialMark*) libp->para[0].ref;
   const DMRFiducialMark& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DMRMarksSet */
static int G__DMRootCint_265_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DMRMarksSet* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DMRMarksSet[n];
     } else {
       p = new((void*) gvp) DMRMarksSet[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DMRMarksSet;
     } else {
       p = new((void*) gvp) DMRMarksSet;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DMRootCintLN_DMRMarksSet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_265_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((DMRMarksSet*) G__getstructoffset())->NewMark());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_265_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const DMRMarksSet*) G__getstructoffset())->GetMark((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_265_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const DMRMarksSet*) G__getstructoffset())->N());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_265_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) ((const DMRMarksSet*) G__getstructoffset())->Abs2Stage((bool) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((const DMRMarksSet*) G__getstructoffset())->Abs2Stage());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_265_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) DMRMarksSet::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_265_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DMRMarksSet::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_265_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) DMRMarksSet::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_265_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      DMRMarksSet::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_265_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DMRMarksSet*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_265_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DMRMarksSet::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_265_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) DMRMarksSet::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_265_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DMRMarksSet::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint_265_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) DMRMarksSet::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DMRMarksSet G__TDMRMarksSet;
static int G__DMRootCint_265_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DMRMarksSet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DMRMarksSet*) (soff+(sizeof(DMRMarksSet)*i)))->~G__TDMRMarksSet();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DMRMarksSet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DMRMarksSet*) (soff))->~G__TDMRMarksSet();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */
static int G__DMRootCint__0_376(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Log0((Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), *((va_list*) G__int(libp->para[3])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DMRootCint__0_377(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   const int imax = 6, dmax = 8, umax = 50;
   int objsize, type, i, icnt = 0, dcnt = 0, ucnt = 0;
   G__value *pval;
   G__int64 lval[imax] = {0};
   double dval[dmax] = {0};
   union { G__int64 lval; double dval; } u[umax] = {{0}};
   for (i = 0; i < libp->paran; i++) {
      type = G__value_get_type(&libp->para[i]);
      pval = &libp->para[i];
      if (isupper(type))
         objsize = G__LONGALLOC;
      else
         objsize = G__sizeof(pval);
      switch (type) {
         case 'c': case 'b': case 's': case 'r': objsize = sizeof(int); break;
         case 'f': objsize = sizeof(double); break;
      }
#ifdef G__VAARG_PASS_BY_REFERENCE
      if (objsize > G__VAARG_PASS_BY_REFERENCE) {
         if (pval->ref > 0x1000) {
            if (icnt < imax) {
               lval[icnt] = pval->ref; icnt++;
            } else {
               u[ucnt].lval = pval->ref; ucnt++;
            }
         } else {
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            }
         }
         type = 'z';
      }
#endif
      switch (type) {
         case 'n': case 'm':
            if (icnt < imax) {
               lval[icnt] = (G__int64)G__Longlong(*pval); icnt++;
            } else {
               u[ucnt].lval = (G__int64)G__Longlong(*pval); ucnt++;
            } break;
         case 'f': case 'd':
            if (dcnt < dmax) {
               dval[dcnt] = G__double(*pval); dcnt++;
            } else {
               u[ucnt].dval = G__double(*pval); ucnt++;
            } break;
         case 'z': break;
         case 'u':
            if (objsize >= 16) {
               memcpy(&u[ucnt].lval, (void*)pval->obj.i, objsize);
               ucnt += objsize/8;
               break;
            }
            // objsize < 16 -> fall through
         case 'g': case 'c': case 'b': case 'r': case 's': case 'h': case 'i':
         case 'k': case 'l':
         default:
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            } break;
      }
      if (ucnt >= 50) printf("Log: more than 56 var args\n");
   }
      G__letint(result7, 103, (long) Log((Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), dval[0], dval[1], dval[2], dval[3], dval[4], dval[5], dval[6], dval[7], lval[3], lval[4], lval[5], u[0].lval, u[1].lval, u[2].lval, u[3].lval, u[4].lval, u[5].lval, u[6].lval, u[7].lval, u[8].lval, u[9].lval, u[10].lval, u[11].lval, u[12].lval, u[13].lval, u[14].lval, u[15].lval, u[16].lval, u[17].lval, u[18].lval, u[19].lval, u[20].lval, u[21].lval, u[22].lval, u[23].lval, u[24].lval, u[25].lval, u[26].lval, u[27].lval, u[28].lval, u[29].lval, u[30].lval, u[31].lval, u[32].lval, u[33].lval, u[34].lval, u[35].lval, u[36].lval, u[37].lval, u[38].lval, u[39].lval, u[40].lval, u[41].lval, u[42].lval, u[43].lval, u[44].lval, u[45].lval, u[46].lval, u[47].lval, u[48].lval, u[49].lval));
   return(1 || funcname || hash || result7 || libp) ;
}


/*********************************************************
* Member function Stub
*********************************************************/

/* DMRAffine2D */

/* DMRCluster */

/* DMRView */

/* DMRGrain */

/* DMRImage */

/* DMRImageCl */

/* DMRFrame */

/* DMRFrameRaw */

/* DMRMicrotrack */

/* DMRViewHeader */

/* DMRRun */

/* DMRRunHeader */

/* DMRTextFile */

/* DMRFiducialMark */

/* DMRMarksSet */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncDMRootCint {
 public:
  G__Sizep2memfuncDMRootCint(): p(&G__Sizep2memfuncDMRootCint::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncDMRootCint::*p)();
};

size_t G__get_sizep2memfuncDMRootCint()
{
  G__Sizep2memfuncDMRootCint a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceDMRootCint() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DMRootCintLN_DMRAffine2D))) {
     DMRAffine2D *G__Lderived;
     G__Lderived=(DMRAffine2D*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DMRootCintLN_DMRAffine2D),G__get_linked_tagnum(&G__DMRootCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DMRootCintLN_DMRCluster))) {
     DMRCluster *G__Lderived;
     G__Lderived=(DMRCluster*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DMRootCintLN_DMRCluster),G__get_linked_tagnum(&G__DMRootCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DMRootCintLN_DMRView))) {
     DMRView *G__Lderived;
     G__Lderived=(DMRView*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DMRootCintLN_DMRView),G__get_linked_tagnum(&G__DMRootCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DMRootCintLN_DMRGrain))) {
     DMRGrain *G__Lderived;
     G__Lderived=(DMRGrain*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DMRootCintLN_DMRGrain),G__get_linked_tagnum(&G__DMRootCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DMRootCintLN_DMRImage))) {
     DMRImage *G__Lderived;
     G__Lderived=(DMRImage*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DMRootCintLN_DMRImage),G__get_linked_tagnum(&G__DMRootCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DMRootCintLN_DMRImageCl))) {
     DMRImageCl *G__Lderived;
     G__Lderived=(DMRImageCl*)0x1000;
     {
       DMRImage *G__Lpbase=(DMRImage*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DMRootCintLN_DMRImageCl),G__get_linked_tagnum(&G__DMRootCintLN_DMRImage),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DMRootCintLN_DMRImageCl),G__get_linked_tagnum(&G__DMRootCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DMRootCintLN_DMRFrame))) {
     DMRFrame *G__Lderived;
     G__Lderived=(DMRFrame*)0x1000;
     {
       DMRImage *G__Lpbase=(DMRImage*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DMRootCintLN_DMRFrame),G__get_linked_tagnum(&G__DMRootCintLN_DMRImage),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DMRootCintLN_DMRFrame),G__get_linked_tagnum(&G__DMRootCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DMRootCintLN_DMRFrameRaw))) {
     DMRFrameRaw *G__Lderived;
     G__Lderived=(DMRFrameRaw*)0x1000;
     {
       DMRFrame *G__Lpbase=(DMRFrame*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DMRootCintLN_DMRFrameRaw),G__get_linked_tagnum(&G__DMRootCintLN_DMRFrame),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       DMRImage *G__Lpbase=(DMRImage*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DMRootCintLN_DMRFrameRaw),G__get_linked_tagnum(&G__DMRootCintLN_DMRImage),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DMRootCintLN_DMRFrameRaw),G__get_linked_tagnum(&G__DMRootCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DMRootCintLN_DMRMicrotrack))) {
     DMRMicrotrack *G__Lderived;
     G__Lderived=(DMRMicrotrack*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DMRootCintLN_DMRMicrotrack),G__get_linked_tagnum(&G__DMRootCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DMRootCintLN_DMRViewHeader))) {
     DMRViewHeader *G__Lderived;
     G__Lderived=(DMRViewHeader*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DMRootCintLN_DMRViewHeader),G__get_linked_tagnum(&G__DMRootCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DMRootCintLN_DMRRun))) {
     DMRRun *G__Lderived;
     G__Lderived=(DMRRun*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DMRootCintLN_DMRRun),G__get_linked_tagnum(&G__DMRootCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DMRootCintLN_DMRRunHeader))) {
     DMRRunHeader *G__Lderived;
     G__Lderived=(DMRRunHeader*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DMRootCintLN_DMRRunHeader),G__get_linked_tagnum(&G__DMRootCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DMRootCintLN_DMRTextFile))) {
     DMRTextFile *G__Lderived;
     G__Lderived=(DMRTextFile*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DMRootCintLN_DMRTextFile),G__get_linked_tagnum(&G__DMRootCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DMRootCintLN_DMRFiducialMark))) {
     DMRFiducialMark *G__Lderived;
     G__Lderived=(DMRFiducialMark*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DMRootCintLN_DMRFiducialMark),G__get_linked_tagnum(&G__DMRootCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DMRootCintLN_DMRMarksSet))) {
     DMRMarksSet *G__Lderived;
     G__Lderived=(DMRMarksSet*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DMRootCintLN_DMRMarksSet),G__get_linked_tagnum(&G__DMRootCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableDMRootCint() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Byte_t",98,-1,0,-1);
   G__setnewtype(-1,"Byte (8 bits) (unsigned char)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Long64_t",110,-1,0,-1);
   G__setnewtype(-1,"Portable signed long integer 8 bytes",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__DMRootCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DMRootCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DMRootCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DMRootCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DMRootCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__DMRootCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DMRootCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DMRootCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DMRootCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DMRootCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__DMRootCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__DMRootCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__DMRootCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__DMRootCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__DMRootCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObjArray*>",117,G__get_linked_tagnum(&G__DMRootCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__DMRootCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__DMRootCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*,less<string> >",117,G__get_linked_tagnum(&G__DMRootCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* DMRAffine2D */
static void G__setup_memvarDMRAffine2D(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DMRootCintLN_DMRAffine2D));
   { DMRAffine2D *p; p=(DMRAffine2D*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->a11)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"a11=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->a12)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"a12=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->a21)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"a21=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->a22)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"a22=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->b1)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"b1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->b2)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"b2=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DMRootCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* DMRCluster */
static void G__setup_memvarDMRCluster(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DMRootCintLN_DMRCluster));
   { DMRCluster *p; p=(DMRCluster*)0x1000; if (p) { }
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"id=",0,"clusters counter inside this view");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DMRootCintLN_DMRClustercLcLdA),-1,-2,1,G__FastAllocString(2048).Format("cf_Merged=%lldLL",(long long)DMRCluster::cf_Merged).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DMRootCintLN_DMRClustercLcLdA),-1,-2,1,G__FastAllocString(2048).Format("cf_Extra=%lldLL",(long long)DMRCluster::cf_Extra).data(),0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->id_f)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"id_f=",0,"cluster id inside frame ifr");
   G__memvar_setup((void*)((long)(&p->icp)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"icp=",0,"copy index (in case of cluster duplication (0-default value)");
   G__memvar_setup((void*)((long)(&p->flags)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"flags=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->x)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"x=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->y)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"y=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->z)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"z=",0,"coordinates (in view RS)");
   G__memvar_setup((void*)((long)(&p->lx)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"lx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ly)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ly=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"phi=",0,"elliptical fit: major, minor, direction");
   G__memvar_setup((void*)((long)(&p->gh)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"gh=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->gb)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"gb=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->gq)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"gq=",0,"gaussian fit: height, bg, quality");
   G__memvar_setup((void*)((long)(&p->npx)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"npx=",0,"number of pixels");
   G__memvar_setup((void*)((long)(&p->vol)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"vol=",0,"total volume");
   G__memvar_setup((void*)((long)(&p->pol)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"pol=",0,"polarization angle");
   G__memvar_setup((void*)((long)(&p->ipol)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ipol=",0,"polarization angle index");
   G__memvar_setup((void*)((long)(&p->color)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"color=",0,"color index if available (default=0)");
   G__memvar_setup((void*)((long)(&p->img)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"img=",0,"index of corresponding image");
   G__memvar_setup((void*)((long)(&p->ifr)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ifr=",0,"owing frame index");
   G__memvar_setup((void*)((long)(&p->igr)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"igr=",0,"owing grain index");
   G__memvar_setup((void*)((long)(&p->imt)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"imt=",0,"owing microtrack index");
   G__memvar_setup((void*)((long)(&p->is_nt)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"is_nt=",0,"1 if this cluster is a nanotrack");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DMRootCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* DMRView */
static void G__setup_memvarDMRView(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DMRootCintLN_DMRView));
   { DMRView *p; p=(DMRView*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->HD)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DMRootCintLN_DMRViewHeader),-1,-1,1,"HD=",0,"View header");
   G__memvar_setup((void*)((long)(&p->CL)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DMRootCintLN_TClonesArray),-1,-1,1,"CL=",0,"array of Clusters");
   G__memvar_setup((void*)((long)(&p->GR)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DMRootCintLN_TClonesArray),-1,-1,1,"GR=",0,"array of Grains");
   G__memvar_setup((void*)((long)(&p->MT)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DMRootCintLN_TClonesArray),-1,-1,1,"MT=",0,"array of MicroTracks");
   G__memvar_setup((void*)((long)(&p->IM)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DMRootCintLN_TClonesArray),-1,-1,1,"IM=",0,"array of cluster images");
   G__memvar_setup((void*)((long)(&p->FR)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DMRootCintLN_TClonesArray),-1,-1,1,"FR=",0,"array of Frames");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"redHD=",0,"!");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"redCL=",0,"!");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"redGR=",0,"!");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"redMT=",0,"!");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"redIM=",0,"!");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"redFR=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DMRootCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* DMRGrain */
static void G__setup_memvarDMRGrain(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DMRootCintLN_DMRGrain));
   { DMRGrain *p; p=(DMRGrain*)0x1000; if (p) { }
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"id=",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DMRootCintLN_DMRGraincLcLdA),-1,-2,1,G__FastAllocString(2048).Format("gf_Merged=%lldLL",(long long)DMRGrain::gf_Merged).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DMRootCintLN_DMRGraincLcLdA),-1,-2,1,G__FastAllocString(2048).Format("gf_Extra=%lldLL",(long long)DMRGrain::gf_Extra).data(),0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->icp)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"icp=",0,"copy index (in case of grain duplication (0-default value)");
   G__memvar_setup((void*)((long)(&p->flags)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"flags=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->x)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"x=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->y)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"y=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->z)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"z=",0,"coordinates");
   G__memvar_setup((void*)((long)(&p->ncl)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"ncl=",0,"number of clusters");
   G__memvar_setup((void*)((long)(&p->npx)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"npx=",0,"total number of pixels (summed over all contained clusters)");
   G__memvar_setup((void*)((long)(&p->vol)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"vol=",0,"total volume (summed over all contained clusters)");
   G__memvar_setup((void*)((long)(&p->lx)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"lx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ly)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ly=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->lz)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"lz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"phi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->theta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"theta=",0,"ellipsoidal fit: 3 axes, 2 slopes");
   G__memvar_setup((void*)((long)(&p->frFirst)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"frFirst=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->frLast)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"frLast=",0,"indices of first and last frames");
   G__memvar_setup((void*)((long)(&p->pol)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"pol=",0,"polarization angle");
   G__memvar_setup((void*)((long)(&p->ipol)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ipol=",0,"polarization angle index");
   G__memvar_setup((void*)((long)(&p->ibfc)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ibfc=",0,"index of the best focused cluater");
   G__memvar_setup((void*)((long)(&p->imt)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"imt=",0,"index of the microtrack owing this grain");
   G__memvar_setup((void*)((long)(&p->ipt)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ipt=",0,"index of the plasmontrack owing this grain");
   G__memvar_setup((void*)((long)(&p->is_nt)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"is_nt=",0,"1 if this grain is a nanotrack");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DMRootCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* DMRImage */
static void G__setup_memvarDMRImage(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DMRootCintLN_DMRImage));
   { DMRImage *p; p=(DMRImage*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DMRootCintLN_DMRImagecLcLdA),-1,-2,1,G__FastAllocString(2048).Format("if_Merged=%lldLL",(long long)DMRImage::if_Merged).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DMRootCintLN_DMRImagecLcLdA),-1,-2,1,G__FastAllocString(2048).Format("if_Extra=%lldLL",(long long)DMRImage::if_Extra).data(),0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cols)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"cols=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rows)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"rows=",0,"image size");
   G__memvar_setup((void*)((long)(&p->sensor)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"sensor=",0,"sensor id (important in case of multycamera systems)");
   G__memvar_setup((void*)((long)(&p->color)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"color=",0,"color index if available (default=0)");
   G__memvar_setup((void*)((long)(&p->pol)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"pol=",0,"polarization angle");
   G__memvar_setup((void*)((long)(&p->ipol)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ipol=",0,"polarization angle index");
   G__memvar_setup((void*)((long)(&p->npx)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"npx=",0,"number of pixels above threshold");
   G__memvar_setup((void*)((long)(&p->pxvol)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"pxvol=",0,"integral volume of pixels above the threshold");
   G__memvar_setup((void*)((long)(&p->ll)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ll=",0,"light level (volts or au)");
   G__memvar_setup((void*)((long)(&p->thres)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"thres=",0,"threshold for the clasterization");
   G__memvar_setup((void*)((long)(&p->flags)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"flags=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DMRootCintLN_TArrayC),-1,-1,4,"eImg=",0,"image buffer");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DMRootCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* DMRImageCl */
static void G__setup_memvarDMRImageCl(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DMRootCintLN_DMRImageCl));
   { DMRImageCl *p; p=(DMRImageCl*)0x1000; if (p) { }
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"id=",0,"imagecl id (entry number in IM array)");
   G__memvar_setup((void*)((long)(&p->x)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"x=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->y)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"y=",0,"lowest x,y in pixels of this image fragment inside frame");
   G__memvar_setup((void*)((long)(&p->icl)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"icl=",0,"cluster id");
   G__memvar_setup((void*)((long)(&p->ifr)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ifr=",0,"frame id inside this view (entry number in frames array)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DMRootCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* DMRFrame */
static void G__setup_memvarDMRFrame(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DMRootCintLN_DMRFrame));
   { DMRFrame *p; p=(DMRFrame*)0x1000; if (p) { }
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"id=",0,"frame id inside view (entry number in RF array)");
   G__memvar_setup((void*)((long)(&p->uid)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"uid=",0,"unique frame id inside run");
   G__memvar_setup((void*)((long)(&p->ix)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ix=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->iy)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->iz)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iz=",0,"iz-step index, ix,iy - not used yet");
   G__memvar_setup((void*)((long)(&p->x)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"x=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->y)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"y=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->z)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"z=",0,"coordiantes of the frame plateRS");
   G__memvar_setup((void*)((long)(&p->time)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"time=",0,"relative time in ms");
   G__memvar_setup((void*)((long)(&p->ncl)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ncl=",0,"number of clusters in the frame");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DMRootCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* DMRFrameRaw */
static void G__setup_memvarDMRFrameRaw(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DMRootCintLN_DMRFrameRaw));
   { DMRFrameRaw *p; p=(DMRFrameRaw*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->ventr)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ventr=",0,"view entry nomber in Vdmr");
   G__memvar_setup((void*)((long)(&p->vid)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"vid=",0,"view counter inside one area");
   G__memvar_setup((void*)((long)(&p->aid)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"aid=",0,"area id");
   G__memvar_setup((void*)((long)(&p->col)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"col=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->row)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"row=",0,"view position inside an area");
   G__memvar_setup((void*)((long)(&p->side)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"side=",0,"0-down,1-up");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DMRootCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* DMRMicrotrack */
static void G__setup_memvarDMRMicrotrack(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DMRootCintLN_DMRMicrotrack));
   { DMRMicrotrack *p; p=(DMRMicrotrack*)0x1000; if (p) { }
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"id=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->flags)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"flags=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ncl)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"ncl=",0,"number of clusters");
   G__memvar_setup((void*)((long)(&p->ngr)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"ngr=",0,"number of grains");
   G__memvar_setup((void*)((long)(&p->frFirst)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"frFirst=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->frLast)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"frLast=",0,"indices of first and last frames triggered by this track");
   G__memvar_setup((void*)((long)(&p->frTrig)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"frTrig=",0,"number of triggered frames");
   G__memvar_setup((void*)((long)(&p->npx)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"npx=",0,"total number of pixels (summed over all grains/clusters)");
   G__memvar_setup((void*)((long)(&p->vol)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"vol=",0,"total volume (summed over all grains/clusters)");
   G__memvar_setup((void*)((long)(&p->limX0)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"limX0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->limY0)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"limY0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->limZ0)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"limZ0=",0,"coordinate of one corner of the bounding box");
   G__memvar_setup((void*)((long)(&p->limX1)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"limX1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->limY1)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"limY1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->limZ1)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"limZ1=",0,"coordinate of the opposite corner of the bounding box");
   G__memvar_setup((void*)((long)(&p->x)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"x=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->y)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"y=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->z)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"z=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"phi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->theta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"theta=",0,"fitted coordinates and slopes");
   G__memvar_setup((void*)((long)(&p->sigX)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"sigX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sigY)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"sigY=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sigZ)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"sigZ=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sigPhi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"sigPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sigTheta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"sigTheta=",0,"sigmas of fitted coordinates and slopes");
   G__memvar_setup((void*)((long)(&p->chi2)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"chi2=",0,"chi2 of the fit");
   G__memvar_setup((void*)((long)(&p->len)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"len=",0,"length");
   G__memvar_setup((void*)((long)(&p->score)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"score=",0,"score");
   G__memvar_setup((void*)((long)(&p->is_pt)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"is_pt=",0,"1 if this track is due to plasmon analysis");
   G__memvar_setup((void*)((long)(&p->grains)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DMRootCintLN_TObjArray),-1,-1,1,"grains=",0,"! transient grains array (does not saved into root file)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DMRootCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* DMRViewHeader */
static void G__setup_memvarDMRViewHeader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DMRootCintLN_DMRViewHeader));
   { DMRViewHeader *p; p=(DMRViewHeader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"id=",0,"view id (entry number in the tree)");
   G__memvar_setup((void*)((long)(&p->vid)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"vid=",0,"view counter inside one area");
   G__memvar_setup((void*)((long)(&p->aid)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"aid=",0,"area id");
   G__memvar_setup((void*)((long)(&p->col)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"col=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->row)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"row=",0,"view position inside an area");
   G__memvar_setup((void*)((long)(&p->flag)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"flag=",0,"flag");
   G__memvar_setup((void*)((long)(&p->side)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"side=",0,"0-down,1-up");
   G__memvar_setup((void*)((long)(&p->x)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"x=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->y)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"y=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->z)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"z=",0,"center of the view");
   G__memvar_setup((void*)((long)(&p->rmax)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"rmax=",0,"radial limit around view center (default -1: not used)");
   G__memvar_setup((void*)((long)(&p->xmin)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"xmin=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xmax)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"xmax=",0,"view limits");
   G__memvar_setup((void*)((long)(&p->ymin)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ymin=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ymax)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ymax=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->zmin)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"zmin=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->zmax)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"zmax=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->zlayers)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DMRootCintLN_TArrayF),-1,-1,1,"zlayers=",0,"in case of n layers n+1 layer limits");
   G__memvar_setup((void*)((long)(&p->polsteps)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DMRootCintLN_TArrayF),-1,-1,1,"polsteps=",0,"polstep[ipol] - polarization angle");
   G__memvar_setup((void*)((long)(&p->ncl)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ncl=",0,"number of stored clusters");
   G__memvar_setup((void*)((long)(&p->ngr)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ngr=",0,"number of stored grains");
   G__memvar_setup((void*)((long)(&p->nmt)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nmt=",0,"number of stored microtracks");
   G__memvar_setup((void*)((long)(&p->nim)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nim=",0,"number of stored images");
   G__memvar_setup((void*)((long)(&p->nfr)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nfr=",0,"number of stored frames");
   G__memvar_setup((void*)((long)(&p->track)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"track=",0,"prediction id in case of point scan");
   G__memvar_setup((void*)((long)(&p->event)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"event=",0,"event id in case of point scan");
   G__memvar_setup((void*)((long)(&p->time)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"time=",0,"relative acquisition time in ms");
   G__memvar_setup((void*)((long)(&p->aff)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DMRootCintLN_DMRAffine2D),-1,-1,1,"aff=",0,"affine transformation from viewRS to plateRS");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DMRootCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* DMRRun */
static void G__setup_memvarDMRRun(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DMRootCintLN_DMRRun));
   { DMRRun *p; p=(DMRRun*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DMRootCintLN_DMRRunHeader),-1,-1,4,"eHeader=",0,"run header");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DMRootCintLN_DMRView),-1,-1,4,"eView=",0,"data exchange container");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DMRootCintLN_TTree),-1,-1,4,"eTree=",0,"tree with Views");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DMRootCintLN_TFile),-1,-1,4,"eFile=",0,"file associated with the Run");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DMRootCintLN_TString),-1,-1,4,"ePath=",0,"runs directory path");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DMRootCintLN_TTree),-1,-1,4,"eViewAlign=",0,"view neighbours  alignment");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DMRootCintLN_TTree),-1,-1,4,"eFrameAlign=",0,"frames alignment");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DMRootCintLN_AlignmentParView),-1,-1,4,"eVA=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DMRootCintLN_AlignmentParFrame),-1,-1,4,"eFA=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DMRootCintLN_DMRViewHeader),-1,-1,4,"eVH1=",0,"alignment headers");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DMRootCintLN_DMRViewHeader),-1,-1,4,"eVH2=",0,"alignment headers");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DMRootCintLN_TTree),-1,-1,4,"eFrames=",0,"raw frames (images)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DMRootCintLN_DMRFrameRaw),-1,-1,4,"eFrameRaw=",0,"container for storage into Frames tree");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"eFixEncoderFaults=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DMRootCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* DMRRunHeader */
static void G__setup_memvarDMRRunHeader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DMRootCintLN_DMRRunHeader));
   { DMRRunHeader *p; p=(DMRRunHeader*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->id)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"id=",0,"RUN id");
   G__memvar_setup((void*)((long)(&p->flags)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"flags[20]=",0,"flags");
   G__memvar_setup((void*)((long)(&p->startTime)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DMRootCintLN_TDatime),-1,-1,1,"startTime=",0,"Date and Time of run starting");
   G__memvar_setup((void*)((long)(&p->startTimeSys)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"startTimeSys=",0,"system start time in ms");
   G__memvar_setup((void*)((long)(&p->nareas)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nareas=",0,"total number of areas (fragments) in the run");
   G__memvar_setup((void*)((long)(&p->comment)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DMRootCintLN_TString),-1,-1,1,"comment=",0,"Comment to define this scanning session");
   G__memvar_setup((void*)((long)(&p->plateID)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"plateID=",0,"plate ID");
   G__memvar_setup((void*)((long)(&p->hUp)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"hUp=",0,"Up side   | nominal emulsion thickness before shrinkage (on the beam)");
   G__memvar_setup((void*)((long)(&p->hBase)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"hBase=",0,"base thickness");
   G__memvar_setup((void*)((long)(&p->hDown)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"hDown=",0,"Down side |  (normally should be the same)");
   G__memvar_setup((void*)((long)(&p->shrinkageUp)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"shrinkageUp=",0,"srinkage of the Up side (measured in the test run)");
   G__memvar_setup((void*)((long)(&p->shrinkageDown)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"shrinkageDown=",0,"srinkage of the Down side (measured in the test run)");
   G__memvar_setup((void*)((long)(&p->npixX)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"npixX=",0,"number of pixels along X (number of columns)");
   G__memvar_setup((void*)((long)(&p->npixY)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"npixY=",0,"number of pixels along Y (number of rows)");
   G__memvar_setup((void*)((long)(&p->pixX)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"pixX=",0,"pixel/micron  X");
   G__memvar_setup((void*)((long)(&p->pixY)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"pixY=",0,"pixel/micron  Y");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DMRootCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* DMRTextFile */
static void G__setup_memvarDMRTextFile(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DMRootCintLN_DMRTextFile));
   { DMRTextFile *p; p=(DMRTextFile*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DMRootCintLN_string),-1,-1,4,"originalname=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DMRootCintLN_string),-1,-1,4,"buffer=",0,(char*)NULL);
   G__memvar_setup((void*)0,107,0,0,-1,G__defined_typename("size_t"),-1,4,"size=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DMRootCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* DMRFiducialMark */
static void G__setup_memvarDMRFiducialMark(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DMRootCintLN_DMRFiducialMark));
   { DMRFiducialMark *p; p=(DMRFiducialMark*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->id)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"id=",0,"mark id");
   G__memvar_setup((void*)((long)(&p->type)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"type=",0,"type of mark (x-ray, lateral, blob, etc)");
   G__memvar_setup((void*)((long)(&p->x_abs)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"x_abs=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->y_abs)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"y_abs=",0,"absolute (nominal) coords");
   G__memvar_setup((void*)((long)(&p->x_msr)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"x_msr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->y_msr)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"y_msr=",0,"measured coords");
   G__memvar_setup((void*)((long)(&p->is_found)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"is_found=",0,"true if mark was found");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"cnt=",0,"counter (inside marks set)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DMRootCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* DMRMarksSet */
static void G__setup_memvarDMRMarksSet(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DMRootCintLN_DMRMarksSet));
   { DMRMarksSet *p; p=(DMRMarksSet*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DMRootCintLN_TObjArray),-1,-1,4,"eMarks=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DMRootCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarDMRootCint() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncDMRAffine2D(void) {
   /* DMRAffine2D */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DMRootCintLN_DMRAffine2D));
   G__memfunc_setup("DMRAffine2D",930,G__DMRootCint_107_0_1, 105, G__get_linked_tagnum(&G__DMRootCintLN_DMRAffine2D), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,G__DMRootCint_107_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,G__DMRootCint_107_0_3, 121, -1, -1, 0, 6, 1, 1, 0, 
"d - - 0 - _a11 d - - 0 - _a12 "
"d - - 0 - _a21 d - - 0 - _a22 "
"d - - 0 - _b1 d - - 0 - _b2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("X",88,G__DMRootCint_107_0_4, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Y",89,G__DMRootCint_107_0_5, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Transform",956,G__DMRootCint_107_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "u 'DMRAffine2D' - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Invert",632,G__DMRootCint_107_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Rotate",623,G__DMRootCint_107_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - angle", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AsString",811,G__DMRootCint_107_0_9, 67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Calculate",910,G__DMRootCint_107_0_10, 105, -1, G__defined_typename("Int_t"), 0, 6, 1, 1, 0, 
"i - - 0 - n D - 'Double_t' 0 - x0 "
"D - 'Double_t' 0 - y0 D - 'Double_t' 0 - x1 "
"D - 'Double_t' 0 - y1 i - - 0 '0' flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalculateFull",1313,G__DMRootCint_107_0_11, 105, -1, G__defined_typename("Int_t"), 0, 5, 1, 1, 0, 
"i - - 0 - n D - 'Double_t' 0 - x0 "
"D - 'Double_t' 0 - y0 D - 'Double_t' 0 - x1 "
"D - 'Double_t' 0 - y1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalculateTurn",1335,G__DMRootCint_107_0_12, 105, -1, G__defined_typename("Int_t"), 0, 5, 1, 1, 0, 
"i - - 0 - n D - 'Double_t' 0 - x0 "
"D - 'Double_t' 0 - y0 D - 'Double_t' 0 - x1 "
"D - 'Double_t' 0 - y1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Phi",289,G__DMRootCint_107_0_13, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DMRootCint_107_0_14, 85, G__get_linked_tagnum(&G__DMRootCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&DMRAffine2D::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DMRootCint_107_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DMRAffine2D::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DMRootCint_107_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&DMRAffine2D::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DMRootCint_107_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&DMRAffine2D::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DMRootCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DMRootCint_107_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DMRootCint_107_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DMRAffine2D::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DMRootCint_107_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&DMRAffine2D::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DMRootCint_107_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DMRAffine2D::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DMRootCint_107_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&DMRAffine2D::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("DMRAffine2D", 930, G__DMRootCint_107_0_26, (int) ('i'), G__get_linked_tagnum(&G__DMRootCintLN_DMRAffine2D), -1, 0, 1, 1, 1, 0, "u 'DMRAffine2D' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DMRAffine2D", 1056, G__DMRootCint_107_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DMRootCint_107_0_28, (int) ('u'), G__get_linked_tagnum(&G__DMRootCintLN_DMRAffine2D), -1, 1, 1, 1, 1, 0, "u 'DMRAffine2D' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDMRCluster(void) {
   /* DMRCluster */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DMRootCintLN_DMRCluster));
   G__memfunc_setup("DMRCluster",965,G__DMRootCint_108_0_1, 105, G__get_linked_tagnum(&G__DMRootCintLN_DMRCluster), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ID",141,G__DMRootCint_108_0_2, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ToPixels",824,G__DMRootCint_108_0_3, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - - 0 - pixX f - - 0 - pixY "
"i - - 0 - nx i - - 0 - ny", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DMRootCint_108_0_4, 85, G__get_linked_tagnum(&G__DMRootCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&DMRCluster::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DMRootCint_108_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DMRCluster::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DMRootCint_108_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&DMRCluster::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DMRootCint_108_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&DMRCluster::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DMRootCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DMRootCint_108_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DMRootCint_108_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DMRCluster::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DMRootCint_108_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&DMRCluster::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DMRootCint_108_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DMRCluster::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DMRootCint_108_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&DMRCluster::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("DMRCluster", 965, G__DMRootCint_108_0_16, (int) ('i'), G__get_linked_tagnum(&G__DMRootCintLN_DMRCluster), -1, 0, 1, 1, 1, 0, "u 'DMRCluster' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DMRCluster", 1091, G__DMRootCint_108_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DMRootCint_108_0_18, (int) ('u'), G__get_linked_tagnum(&G__DMRootCintLN_DMRCluster), -1, 1, 1, 1, 1, 0, "u 'DMRCluster' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDMRView(void) {
   /* DMRView */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DMRootCintLN_DMRView));
   G__memfunc_setup("DMRView",638,G__DMRootCint_109_0_1, 105, G__get_linked_tagnum(&G__DMRootCintLN_DMRView), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,G__DMRootCint_109_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddCluster",1003,G__DMRootCint_109_0_3, 85, G__get_linked_tagnum(&G__DMRootCintLN_DMRCluster), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddGrain",762,G__DMRootCint_109_0_4, 85, G__get_linked_tagnum(&G__DMRootCintLN_DMRGrain), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddMicrotrack",1304,G__DMRootCint_109_0_5, 85, G__get_linked_tagnum(&G__DMRootCintLN_DMRMicrotrack), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddImageCl",923,G__DMRootCint_109_0_6, 85, G__get_linked_tagnum(&G__DMRootCintLN_DMRImageCl), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddFrame",756,G__DMRootCint_109_0_7, 85, G__get_linked_tagnum(&G__DMRootCintLN_DMRFrame), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHD",428,G__DMRootCint_109_0_8, 85, G__get_linked_tagnum(&G__DMRootCintLN_DMRViewHeader), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCL",431,G__DMRootCint_109_0_9, 85, G__get_linked_tagnum(&G__DMRootCintLN_DMRCluster), -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGR",441,G__DMRootCint_109_0_10, 85, G__get_linked_tagnum(&G__DMRootCintLN_DMRGrain), -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMT",449,G__DMRootCint_109_0_11, 85, G__get_linked_tagnum(&G__DMRootCintLN_DMRMicrotrack), -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIM",438,G__DMRootCint_109_0_12, 85, G__get_linked_tagnum(&G__DMRootCintLN_DMRImageCl), -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFR",440,G__DMRootCint_109_0_13, 85, G__get_linked_tagnum(&G__DMRootCintLN_DMRFrame), -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFR",440,G__DMRootCint_109_0_14, 85, G__get_linked_tagnum(&G__DMRootCintLN_DMRFrame), -1, 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - iz i - - 0 - ipol", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SamePol",689,G__DMRootCint_109_0_15, 103, -1, -1, 0, 2, 1, 1, 8, 
"f - - 0 - pol1 f - - 0 - pol2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCLofGR",797,G__DMRootCint_109_0_16, 85, G__get_linked_tagnum(&G__DMRootCintLN_TObjArray), -1, 0, 1, 1, 1, 0, "i - - 0 - igr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFrames",894,G__DMRootCint_109_0_17, 85, G__get_linked_tagnum(&G__DMRootCintLN_TObjArray), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ifr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetClusters",1141,G__DMRootCint_109_0_18, 85, G__get_linked_tagnum(&G__DMRootCintLN_TObjArray), -1, 0, 6, 1, 1, 0, 
"f - - 0 - x0 f - - 0 - y0 "
"f - - 0 - dx f - - 0 - dy "
"i - 'Int_t' 0 - ifr i - - 0 - ipol", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddIM2FR",617,G__DMRootCint_109_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - ncol i - - 0 - nrow", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetImageCl",946,G__DMRootCint_109_0_20, 85, G__get_linked_tagnum(&G__DMRootCintLN_DMRImageCl), -1, 0, 3, 1, 1, 0, 
"u 'DMRCluster' - 11 - cl i - - 0 - dx "
"i - - 0 - dy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FixEncoderFaults",1622,G__DMRootCint_109_0_21, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DMRootCint_109_0_22, 85, G__get_linked_tagnum(&G__DMRootCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&DMRView::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DMRootCint_109_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DMRView::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DMRootCint_109_0_24, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&DMRView::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DMRootCint_109_0_25, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&DMRView::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DMRootCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DMRootCint_109_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DMRootCint_109_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DMRView::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DMRootCint_109_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&DMRView::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DMRootCint_109_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DMRView::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DMRootCint_109_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&DMRView::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("DMRView", 638, G__DMRootCint_109_0_34, (int) ('i'), G__get_linked_tagnum(&G__DMRootCintLN_DMRView), -1, 0, 1, 1, 1, 0, "u 'DMRView' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DMRView", 764, G__DMRootCint_109_0_35, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DMRootCint_109_0_36, (int) ('u'), G__get_linked_tagnum(&G__DMRootCintLN_DMRView), -1, 1, 1, 1, 1, 0, "u 'DMRView' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDMRGrain(void) {
   /* DMRGrain */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DMRootCintLN_DMRGrain));
   G__memfunc_setup("DMRGrain",724,G__DMRootCint_111_0_1, 105, G__get_linked_tagnum(&G__DMRootCintLN_DMRGrain), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ID",141,G__DMRootCint_111_0_2, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DMRootCint_111_0_3, 85, G__get_linked_tagnum(&G__DMRootCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&DMRGrain::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DMRootCint_111_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DMRGrain::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DMRootCint_111_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&DMRGrain::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DMRootCint_111_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&DMRGrain::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DMRootCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DMRootCint_111_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DMRootCint_111_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DMRGrain::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DMRootCint_111_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&DMRGrain::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DMRootCint_111_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DMRGrain::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DMRootCint_111_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&DMRGrain::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("DMRGrain", 724, G__DMRootCint_111_0_15, (int) ('i'), G__get_linked_tagnum(&G__DMRootCintLN_DMRGrain), -1, 0, 1, 1, 1, 0, "u 'DMRGrain' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DMRGrain", 850, G__DMRootCint_111_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DMRootCint_111_0_17, (int) ('u'), G__get_linked_tagnum(&G__DMRootCintLN_DMRGrain), -1, 1, 1, 1, 1, 0, "u 'DMRGrain' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDMRImage(void) {
   /* DMRImage */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DMRootCintLN_DMRImage));
   G__memfunc_setup("DMRImage",710,G__DMRootCint_116_0_1, 105, G__get_linked_tagnum(&G__DMRootCintLN_DMRImage), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetImage",771,G__DMRootCint_116_0_2, 66, -1, G__defined_typename("Byte_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetImage",771,G__DMRootCint_116_0_3, 66, -1, G__defined_typename("Byte_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Npix",415,G__DMRootCint_116_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__DMRootCint_116_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetImage",783,G__DMRootCint_116_0_6, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - cols i - 'Int_t' 0 - rows "
"B - 'Byte_t' 10 - img", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetImage",783,G__DMRootCint_116_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - cols i - 'Int_t' 0 - rows", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHist2",746,G__DMRootCint_116_0_8, 85, G__get_linked_tagnum(&G__DMRootCintLN_TH2F), -1, 0, 1, 1, 1, 8, "i - - 0 '0' invert", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("I",73,G__DMRootCint_116_0_9, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"i - - 0 - x i - - 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPixel",802,G__DMRootCint_116_0_10, 98, -1, G__defined_typename("Byte_t"), 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPixel",802,G__DMRootCint_116_0_11, 98, -1, G__defined_typename("Byte_t"), 0, 2, 1, 1, 8, 
"i - - 0 - x i - - 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPixel",814,G__DMRootCint_116_0_12, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - x i - - 0 - y "
"b - 'Byte_t' 0 - pix", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RemovePixelNoise",1646,G__DMRootCint_116_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - delta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadImage",863,G__DMRootCint_116_0_14, 103, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - file", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalculateImageStatistics",2460,G__DMRootCint_116_0_15, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Min",292,G__DMRootCint_116_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'DMRImage' - 11 - im", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Max",294,G__DMRootCint_116_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'DMRImage' - 11 - im", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ExtractFragment",1551,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 5, 1, 2, 0, 
"u 'DMRImage' - 1 - im i - - 0 - x0 "
"i - - 0 - y0 i - - 0 - dx "
"i - - 0 - dy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DMRImage",710,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__DMRootCintLN_DMRImage), -1, 0, 1, 5, 4, 0, "u 'DMRImage' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__DMRootCintLN_DMRImage), -1, 1, 1, 1, 4, 0, "u 'DMRImage' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set0",348,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DMRootCint_116_0_22, 85, G__get_linked_tagnum(&G__DMRootCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&DMRImage::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DMRootCint_116_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DMRImage::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DMRootCint_116_0_24, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&DMRImage::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DMRootCint_116_0_25, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&DMRImage::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DMRootCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DMRootCint_116_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DMRootCint_116_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DMRImage::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DMRootCint_116_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&DMRImage::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DMRootCint_116_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DMRImage::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DMRootCint_116_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&DMRImage::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~DMRImage", 836, G__DMRootCint_116_0_34, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDMRImageCl(void) {
   /* DMRImageCl */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DMRootCintLN_DMRImageCl));
   G__memfunc_setup("DMRImageCl",885,G__DMRootCint_118_0_1, 105, G__get_linked_tagnum(&G__DMRootCintLN_DMRImageCl), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ID",141,G__DMRootCint_118_0_2, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHist2",746,G__DMRootCint_118_0_3, 85, G__get_linked_tagnum(&G__DMRootCintLN_TH2F), -1, 0, 1, 1, 1, 8, "i - - 0 '0' invert", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ExtractFragment",1551,G__DMRootCint_118_0_4, 85, G__get_linked_tagnum(&G__DMRootCintLN_DMRImageCl), -1, 0, 4, 1, 1, 0, 
"i - - 0 - x0 i - - 0 - y0 "
"i - - 0 - dx i - - 0 - dy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DMRootCint_118_0_5, 85, G__get_linked_tagnum(&G__DMRootCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&DMRImageCl::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DMRootCint_118_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DMRImageCl::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DMRootCint_118_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&DMRImageCl::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DMRootCint_118_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&DMRImageCl::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DMRootCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DMRootCint_118_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DMRootCint_118_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DMRImageCl::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DMRootCint_118_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&DMRImageCl::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DMRootCint_118_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DMRImageCl::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DMRootCint_118_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&DMRImageCl::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~DMRImageCl", 1011, G__DMRootCint_118_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDMRFrame(void) {
   /* DMRFrame */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DMRootCintLN_DMRFrame));
   G__memfunc_setup("DMRFrame",718,G__DMRootCint_119_0_1, 105, G__get_linked_tagnum(&G__DMRootCintLN_DMRFrame), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHist2",746,G__DMRootCint_119_0_2, 85, G__get_linked_tagnum(&G__DMRootCintLN_TH2F), -1, 0, 1, 1, 1, 8, "i - - 0 '0' invert", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ID",141,G__DMRootCint_119_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddIM2FR",617,G__DMRootCint_119_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "u 'DMRImageCl' - 11 - imcl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ExtractFragment",1551,G__DMRootCint_119_0_5, 85, G__get_linked_tagnum(&G__DMRootCintLN_DMRImageCl), -1, 0, 4, 1, 1, 0, 
"i - - 0 - x0 i - - 0 - y0 "
"i - - 0 - dx i - - 0 - dy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DMRootCint_119_0_6, 85, G__get_linked_tagnum(&G__DMRootCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&DMRFrame::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DMRootCint_119_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DMRFrame::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DMRootCint_119_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&DMRFrame::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DMRootCint_119_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&DMRFrame::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DMRootCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DMRootCint_119_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DMRootCint_119_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DMRFrame::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DMRootCint_119_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&DMRFrame::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DMRootCint_119_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DMRFrame::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DMRootCint_119_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&DMRFrame::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~DMRFrame", 844, G__DMRootCint_119_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDMRFrameRaw(void) {
   /* DMRFrameRaw */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DMRootCintLN_DMRFrameRaw));
   G__memfunc_setup("DMRFrameRaw",1016,G__DMRootCint_120_0_1, 105, G__get_linked_tagnum(&G__DMRootCintLN_DMRFrameRaw), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DMRootCint_120_0_2, 85, G__get_linked_tagnum(&G__DMRootCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&DMRFrameRaw::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DMRootCint_120_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DMRFrameRaw::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DMRootCint_120_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&DMRFrameRaw::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DMRootCint_120_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&DMRFrameRaw::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DMRootCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DMRootCint_120_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DMRootCint_120_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DMRFrameRaw::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DMRootCint_120_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&DMRFrameRaw::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DMRootCint_120_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DMRFrameRaw::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DMRootCint_120_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&DMRFrameRaw::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~DMRFrameRaw", 1142, G__DMRootCint_120_0_14, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDMRMicrotrack(void) {
   /* DMRMicrotrack */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DMRootCintLN_DMRMicrotrack));
   G__memfunc_setup("DMRMicrotrack",1266,G__DMRootCint_148_0_1, 105, G__get_linked_tagnum(&G__DMRootCintLN_DMRMicrotrack), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ID",141,G__DMRootCint_148_0_2, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeMicrotrack",1421,G__DMRootCint_148_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TObjArray' - 11 - grains", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DMRootCint_148_0_4, 85, G__get_linked_tagnum(&G__DMRootCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&DMRMicrotrack::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DMRootCint_148_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DMRMicrotrack::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DMRootCint_148_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&DMRMicrotrack::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DMRootCint_148_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&DMRMicrotrack::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DMRootCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DMRootCint_148_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DMRootCint_148_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DMRMicrotrack::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DMRootCint_148_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&DMRMicrotrack::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DMRootCint_148_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DMRMicrotrack::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DMRootCint_148_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&DMRMicrotrack::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("DMRMicrotrack", 1266, G__DMRootCint_148_0_16, (int) ('i'), G__get_linked_tagnum(&G__DMRootCintLN_DMRMicrotrack), -1, 0, 1, 1, 1, 0, "u 'DMRMicrotrack' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DMRMicrotrack", 1392, G__DMRootCint_148_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DMRootCint_148_0_18, (int) ('u'), G__get_linked_tagnum(&G__DMRootCintLN_DMRMicrotrack), -1, 1, 1, 1, 1, 0, "u 'DMRMicrotrack' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDMRViewHeader(void) {
   /* DMRViewHeader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DMRootCintLN_DMRViewHeader));
   G__memfunc_setup("DMRViewHeader",1223,G__DMRootCint_151_0_1, 105, G__get_linked_tagnum(&G__DMRootCintLN_DMRViewHeader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ID",141,G__DMRootCint_151_0_2, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set0",348,G__DMRootCint_151_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DMRootCint_151_0_4, 85, G__get_linked_tagnum(&G__DMRootCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&DMRViewHeader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DMRootCint_151_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DMRViewHeader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DMRootCint_151_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&DMRViewHeader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DMRootCint_151_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&DMRViewHeader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DMRootCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DMRootCint_151_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DMRootCint_151_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DMRViewHeader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DMRootCint_151_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&DMRViewHeader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DMRootCint_151_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DMRViewHeader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DMRootCint_151_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&DMRViewHeader::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("DMRViewHeader", 1223, G__DMRootCint_151_0_16, (int) ('i'), G__get_linked_tagnum(&G__DMRootCintLN_DMRViewHeader), -1, 0, 1, 1, 1, 0, "u 'DMRViewHeader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DMRViewHeader", 1349, G__DMRootCint_151_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DMRootCint_151_0_18, (int) ('u'), G__get_linked_tagnum(&G__DMRootCintLN_DMRViewHeader), -1, 1, 1, 1, 1, 0, "u 'DMRViewHeader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDMRRun(void) {
   /* DMRRun */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DMRootCintLN_DMRRun));
   G__memfunc_setup("Init0",452,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DMRRun",536,G__DMRootCint_152_0_2, 105, G__get_linked_tagnum(&G__DMRootCintLN_DMRRun), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DMRRun",536,G__DMRootCint_152_0_3, 105, G__get_linked_tagnum(&G__DMRootCintLN_DMRRun), -1, 0, 2, 1, 1, 0, 
"C - - 10 - fname C - - 10 '0' opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("OpenExistingFile",1629,G__DMRootCint_152_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - fname C - - 10 - opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("OpenNewFile",1084,G__DMRootCint_152_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - fname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHeader",873,G__DMRootCint_152_0_6, 85, G__get_linked_tagnum(&G__DMRootCintLN_DMRRunHeader), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetView",699,G__DMRootCint_152_0_7, 85, G__get_linked_tagnum(&G__DMRootCintLN_DMRView), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetView",699,G__DMRootCint_152_0_8, 85, G__get_linked_tagnum(&G__DMRootCintLN_DMRView), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTree",688,G__DMRootCint_152_0_9, 85, G__get_linked_tagnum(&G__DMRootCintLN_TTree), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetView",711,G__DMRootCint_152_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "U 'DMRView' - 0 - view", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetView",711,G__DMRootCint_152_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFixEncoderFaults",1922,G__DMRootCint_152_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 - dofix", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMaxFileSize",1389,G__DMRootCint_152_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "n - 'Long64_t' 0 - bytes_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddView",676,G__DMRootCint_152_0_14, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddView",676,G__DMRootCint_152_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "U 'DMRView' - 0 - view", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Close",502,G__DMRootCint_152_0_16, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFile",672,G__DMRootCint_152_0_17, 85, G__get_linked_tagnum(&G__DMRootCintLN_TFile), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddTextFile",1070,G__DMRootCint_152_0_18, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - file C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEntry",818,G__DMRootCint_152_0_19, 85, G__get_linked_tagnum(&G__DMRootCintLN_DMRView), -1, 0, 7, 1, 1, 0, 
"i - - 0 - entry i - - 0 '1' ihd "
"i - - 0 '0' icl i - - 0 '0' igr "
"i - - 0 '0' imt i - - 0 '0' iim "
"i - - 0 '0' ifr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddViewAlign",1167,G__DMRootCint_152_0_20, 121, -1, -1, 0, 18, 1, 1, 0, 
"i - 'Int_t' 0 - view1 i - 'Int_t' 0 - view2 "
"i - 'Int_t' 0 - area1 i - 'Int_t' 0 - area2 "
"i - 'Int_t' 0 - side1 i - 'Int_t' 0 - side2 "
"f - 'Float_t' 0 - dx f - 'Float_t' 0 - dy "
"f - 'Float_t' 0 - dz i - 'Int_t' 0 - n1tot "
"i - 'Int_t' 0 - n2tot i - 'Int_t' 0 - n1 "
"i - 'Int_t' 0 - n2 i - 'Int_t' 0 - nsg "
"i - 'Int_t' 0 - nbg i - 'Int_t' 0 - flag "
"u 'DMRViewHeader' - 1 - vh1 u 'DMRViewHeader' - 1 - vh2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddFrameAlign",1247,G__DMRootCint_152_0_21, 121, -1, -1, 0, 18, 1, 1, 0, 
"i - 'Int_t' 0 - frame1 i - 'Int_t' 0 - frame2 "
"i - 'Int_t' 0 - view i - 'Int_t' 0 - area "
"i - 'Int_t' 0 - side f - 'Float_t' 0 - dxglobal "
"f - 'Float_t' 0 - dyglobal f - 'Float_t' 0 - dx "
"f - 'Float_t' 0 - dy f - 'Float_t' 0 - z1 "
"f - 'Float_t' 0 - z2 i - 'Int_t' 0 - n1tot "
"i - 'Int_t' 0 - n2tot i - 'Int_t' 0 - n1 "
"i - 'Int_t' 0 - n2 i - 'Int_t' 0 - nsg "
"i - 'Int_t' 0 - nbg i - 'Int_t' 0 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddFrameRaw",1054,G__DMRootCint_152_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFrames",906,G__DMRootCint_152_0_23, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFrameRaw",1077,G__DMRootCint_152_0_24, 85, G__get_linked_tagnum(&G__DMRootCintLN_DMRFrameRaw), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFrameRaw",1077,G__DMRootCint_152_0_25, 85, G__get_linked_tagnum(&G__DMRootCintLN_DMRFrameRaw), -1, 0, 1, 1, 1, 0, "i - - 0 - entr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFrameRaw",1077,G__DMRootCint_152_0_26, 85, G__get_linked_tagnum(&G__DMRootCintLN_DMRFrameRaw), -1, 0, 1, 1, 1, 0, "C - - 10 - cut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetImagesCl",1061,G__DMRootCint_152_0_27, 85, G__get_linked_tagnum(&G__DMRootCintLN_TObjArray), -1, 0, 6, 1, 1, 0, 
"i - - 0 - ventr i - - 0 - iz "
"f - - 0 - x0 f - - 0 - y0 "
"i - - 0 - dx i - - 0 - dy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGRIM",591,G__DMRootCint_152_0_28, 85, G__get_linked_tagnum(&G__DMRootCintLN_DMRImageCl), -1, 0, 4, 1, 1, 0, 
"i - - 0 - iv i - - 0 - igr "
"i - - 0 - ipol i - - 0 - dr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGRIMBFC",794,G__DMRootCint_152_0_29, 85, G__get_linked_tagnum(&G__DMRootCintLN_DMRImageCl), -1, 0, 6, 1, 1, 0, 
"i - - 0 - iv i - - 0 - igr "
"i - - 0 - ipol i - - 0 - dr "
"i - - 0 - x0 i - - 0 - y0", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCLIM",581,G__DMRootCint_152_0_30, 85, G__get_linked_tagnum(&G__DMRootCintLN_DMRImageCl), -1, 0, 4, 1, 1, 0, 
"i - - 0 - iv i - - 0 - igr "
"i - - 0 - ipol i - - 0 - dr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCLIMBFC",784,G__DMRootCint_152_0_31, 85, G__get_linked_tagnum(&G__DMRootCintLN_DMRImageCl), -1, 0, 6, 1, 1, 0, 
"i - - 0 - iv i - - 0 - icl "
"i - - 0 - ipol i - - 0 - dr "
"i - - 0 - x0 i - - 0 - y0", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGRCLs",699,G__DMRootCint_152_0_32, 85, G__get_linked_tagnum(&G__DMRootCintLN_TObjArray), -1, 0, 4, 1, 1, 0, 
"i - - 0 - iv i - - 0 - igr "
"i - - 0 - ipol i - - 0 - dr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCLCLs",689,G__DMRootCint_152_0_33, 85, G__get_linked_tagnum(&G__DMRootCintLN_TObjArray), -1, 0, 4, 1, 1, 0, 
"i - - 0 - iv i - - 0 - icl "
"i - - 0 - ipol i - - 0 - dr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DMRootCint_152_0_34, 85, G__get_linked_tagnum(&G__DMRootCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&DMRRun::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DMRootCint_152_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DMRRun::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DMRootCint_152_0_36, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&DMRRun::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DMRootCint_152_0_37, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&DMRRun::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DMRootCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DMRootCint_152_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DMRootCint_152_0_42, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DMRRun::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DMRootCint_152_0_43, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&DMRRun::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DMRootCint_152_0_44, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DMRRun::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DMRootCint_152_0_45, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&DMRRun::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("DMRRun", 536, G__DMRootCint_152_0_46, (int) ('i'), G__get_linked_tagnum(&G__DMRootCintLN_DMRRun), -1, 0, 1, 1, 1, 0, "u 'DMRRun' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DMRRun", 662, G__DMRootCint_152_0_47, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DMRootCint_152_0_48, (int) ('u'), G__get_linked_tagnum(&G__DMRootCintLN_DMRRun), -1, 1, 1, 1, 1, 0, "u 'DMRRun' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDMRRunHeader(void) {
   /* DMRRunHeader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DMRootCintLN_DMRRunHeader));
   G__memfunc_setup("DMRRunHeader",1121,G__DMRootCint_260_0_1, 105, G__get_linked_tagnum(&G__DMRootCintLN_DMRRunHeader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMatrix",929,G__DMRootCint_260_0_2, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - - 0 - nx i - - 0 - ny "
"f - - 0 - pixx f - - 0 - pixy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set0",348,G__DMRootCint_260_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__DMRootCint_260_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DMRootCint_260_0_5, 85, G__get_linked_tagnum(&G__DMRootCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&DMRRunHeader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DMRootCint_260_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DMRRunHeader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DMRootCint_260_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&DMRRunHeader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DMRootCint_260_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&DMRRunHeader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DMRootCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DMRootCint_260_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DMRootCint_260_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DMRRunHeader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DMRootCint_260_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&DMRRunHeader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DMRootCint_260_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DMRRunHeader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DMRootCint_260_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&DMRRunHeader::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("DMRRunHeader", 1121, G__DMRootCint_260_0_17, (int) ('i'), G__get_linked_tagnum(&G__DMRootCintLN_DMRRunHeader), -1, 0, 1, 1, 1, 0, "u 'DMRRunHeader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DMRRunHeader", 1247, G__DMRootCint_260_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DMRootCint_260_0_19, (int) ('u'), G__get_linked_tagnum(&G__DMRootCintLN_DMRRunHeader), -1, 1, 1, 1, 1, 0, "u 'DMRRunHeader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDMRTextFile(void) {
   /* DMRTextFile */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DMRootCintLN_DMRTextFile));
   G__memfunc_setup("DMRTextFile",1032,G__DMRootCint_263_0_1, 105, G__get_linked_tagnum(&G__DMRootCintLN_DMRTextFile), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadFile",764,G__DMRootCint_263_0_2, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "C - - 10 - file", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WriteFile",907,G__DMRootCint_263_0_3, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "C - - 10 '0' file", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__DMRootCint_263_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DMRootCint_263_0_5, 85, G__get_linked_tagnum(&G__DMRootCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&DMRTextFile::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DMRootCint_263_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DMRTextFile::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DMRootCint_263_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&DMRTextFile::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DMRootCint_263_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&DMRTextFile::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DMRootCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DMRootCint_263_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DMRootCint_263_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DMRTextFile::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DMRootCint_263_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&DMRTextFile::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DMRootCint_263_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DMRTextFile::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DMRootCint_263_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&DMRTextFile::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("DMRTextFile", 1032, G__DMRootCint_263_0_17, (int) ('i'), G__get_linked_tagnum(&G__DMRootCintLN_DMRTextFile), -1, 0, 1, 1, 1, 0, "u 'DMRTextFile' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DMRTextFile", 1158, G__DMRootCint_263_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DMRootCint_263_0_19, (int) ('u'), G__get_linked_tagnum(&G__DMRootCintLN_DMRTextFile), -1, 1, 1, 1, 1, 0, "u 'DMRTextFile' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDMRFiducialMark(void) {
   /* DMRFiducialMark */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DMRootCintLN_DMRFiducialMark));
   G__memfunc_setup("DMRFiducialMark",1423,G__DMRootCint_264_0_1, 105, G__get_linked_tagnum(&G__DMRootCintLN_DMRFiducialMark), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Cnt",293,G__DMRootCint_264_0_2, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DMRootCint_264_0_3, 85, G__get_linked_tagnum(&G__DMRootCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&DMRFiducialMark::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DMRootCint_264_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DMRFiducialMark::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DMRootCint_264_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&DMRFiducialMark::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DMRootCint_264_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&DMRFiducialMark::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DMRootCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DMRootCint_264_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DMRootCint_264_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DMRFiducialMark::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DMRootCint_264_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&DMRFiducialMark::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DMRootCint_264_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DMRFiducialMark::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DMRootCint_264_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&DMRFiducialMark::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("DMRFiducialMark", 1423, G__DMRootCint_264_0_15, (int) ('i'), G__get_linked_tagnum(&G__DMRootCintLN_DMRFiducialMark), -1, 0, 1, 1, 1, 0, "u 'DMRFiducialMark' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DMRFiducialMark", 1549, G__DMRootCint_264_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DMRootCint_264_0_17, (int) ('u'), G__get_linked_tagnum(&G__DMRootCintLN_DMRFiducialMark), -1, 1, 1, 1, 1, 0, "u 'DMRFiducialMark' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDMRMarksSet(void) {
   /* DMRMarksSet */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DMRootCintLN_DMRMarksSet));
   G__memfunc_setup("DMRMarksSet",1037,G__DMRootCint_265_0_1, 105, G__get_linked_tagnum(&G__DMRootCintLN_DMRMarksSet), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NewMark",693,G__DMRootCint_265_0_2, 85, G__get_linked_tagnum(&G__DMRootCintLN_DMRFiducialMark), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMark",683,G__DMRootCint_265_0_3, 85, G__get_linked_tagnum(&G__DMRootCintLN_DMRFiducialMark), -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("N",78,G__DMRootCint_265_0_4, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Abs2Stage",828,G__DMRootCint_265_0_5, 85, G__get_linked_tagnum(&G__DMRootCintLN_DMRAffine2D), -1, 0, 1, 1, 1, 8, "g - - 0 'false' invert", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DMRootCint_265_0_6, 85, G__get_linked_tagnum(&G__DMRootCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&DMRMarksSet::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DMRootCint_265_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DMRMarksSet::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DMRootCint_265_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&DMRMarksSet::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DMRootCint_265_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&DMRMarksSet::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DMRootCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DMRootCint_265_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DMRootCint_265_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DMRMarksSet::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DMRootCint_265_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&DMRMarksSet::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DMRootCint_265_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DMRMarksSet::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DMRootCint_265_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&DMRMarksSet::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~DMRMarksSet", 1163, G__DMRootCint_265_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncDMRootCint() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
   G__memvar_setup((void*)(&gDMRDEBUGLEVEL),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"gDMRDEBUGLEVEL=",0,(char*)NULL);

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalDMRootCint() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
   G__memfunc_setup("Log0", 338, G__DMRootCint__0_376, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - level C - - 10 - location "
"C - - 10 - msgfmt u 'va_list' - 0 - va", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("Log", 290, G__DMRootCint__0_377, 103, -1, -1, 0, 3, 8, 1, 0, 
"i - 'Int_t' 0 - level C - - 10 - location "
"C - - 10 - msgfmt", (char*) NULL
, (void*) NULL, 0);

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcDMRootCint() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__DMRootCintLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__DMRootCintLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__DMRootCintLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__DMRootCintLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__DMRootCintLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__DMRootCintLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__DMRootCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__DMRootCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DMRootCintLN_va_list = { "va_list" , 115 , -1 };
G__linked_taginfo G__DMRootCintLN_TObjArray = { "TObjArray" , 99 , -1 };
G__linked_taginfo G__DMRootCintLN_TClonesArray = { "TClonesArray" , 99 , -1 };
G__linked_taginfo G__DMRootCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__DMRootCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DMRootCintLN_DMRAffine2D = { "DMRAffine2D" , 99 , -1 };
G__linked_taginfo G__DMRootCintLN_DMRCluster = { "DMRCluster" , 99 , -1 };
G__linked_taginfo G__DMRootCintLN_DMRView = { "DMRView" , 99 , -1 };
G__linked_taginfo G__DMRootCintLN_DMRClustercLcLdA = { "DMRCluster::$" , 101 , -1 };
G__linked_taginfo G__DMRootCintLN_DMRGrain = { "DMRGrain" , 99 , -1 };
G__linked_taginfo G__DMRootCintLN_DMRGraincLcLdA = { "DMRGrain::$" , 101 , -1 };
G__linked_taginfo G__DMRootCintLN_TArrayC = { "TArrayC" , 99 , -1 };
G__linked_taginfo G__DMRootCintLN_TH2F = { "TH2F" , 99 , -1 };
G__linked_taginfo G__DMRootCintLN_DMRImage = { "DMRImage" , 99 , -1 };
G__linked_taginfo G__DMRootCintLN_DMRImagecLcLdA = { "DMRImage::$" , 101 , -1 };
G__linked_taginfo G__DMRootCintLN_DMRImageCl = { "DMRImageCl" , 99 , -1 };
G__linked_taginfo G__DMRootCintLN_DMRFrame = { "DMRFrame" , 99 , -1 };
G__linked_taginfo G__DMRootCintLN_DMRFrameRaw = { "DMRFrameRaw" , 99 , -1 };
G__linked_taginfo G__DMRootCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__DMRootCintLN_DMRMicrotrack = { "DMRMicrotrack" , 99 , -1 };
G__linked_taginfo G__DMRootCintLN_TArrayF = { "TArrayF" , 99 , -1 };
G__linked_taginfo G__DMRootCintLN_DMRViewHeader = { "DMRViewHeader" , 99 , -1 };
G__linked_taginfo G__DMRootCintLN_DMRRun = { "DMRRun" , 99 , -1 };
G__linked_taginfo G__DMRootCintLN_TTree = { "TTree" , 99 , -1 };
G__linked_taginfo G__DMRootCintLN_TFile = { "TFile" , 99 , -1 };
G__linked_taginfo G__DMRootCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR = { "map<string,TObjArray*,less<string>,allocator<pair<const string,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G__DMRootCintLN_TDatime = { "TDatime" , 99 , -1 };
G__linked_taginfo G__DMRootCintLN_DMRRunHeader = { "DMRRunHeader" , 99 , -1 };
G__linked_taginfo G__DMRootCintLN_AlignmentParView = { "AlignmentParView" , 115 , -1 };
G__linked_taginfo G__DMRootCintLN_AlignmentParFrame = { "AlignmentParFrame" , 115 , -1 };
G__linked_taginfo G__DMRootCintLN_DMRTextFile = { "DMRTextFile" , 99 , -1 };
G__linked_taginfo G__DMRootCintLN_DMRFiducialMark = { "DMRFiducialMark" , 99 , -1 };
G__linked_taginfo G__DMRootCintLN_DMRMarksSet = { "DMRMarksSet" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableDMRootCint() {
  G__DMRootCintLN_TClass.tagnum = -1 ;
  G__DMRootCintLN_TBuffer.tagnum = -1 ;
  G__DMRootCintLN_TMemberInspector.tagnum = -1 ;
  G__DMRootCintLN_TObject.tagnum = -1 ;
  G__DMRootCintLN_TString.tagnum = -1 ;
  G__DMRootCintLN_string.tagnum = -1 ;
  G__DMRootCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__DMRootCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DMRootCintLN_va_list.tagnum = -1 ;
  G__DMRootCintLN_TObjArray.tagnum = -1 ;
  G__DMRootCintLN_TClonesArray.tagnum = -1 ;
  G__DMRootCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__DMRootCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DMRootCintLN_DMRAffine2D.tagnum = -1 ;
  G__DMRootCintLN_DMRCluster.tagnum = -1 ;
  G__DMRootCintLN_DMRView.tagnum = -1 ;
  G__DMRootCintLN_DMRClustercLcLdA.tagnum = -1 ;
  G__DMRootCintLN_DMRGrain.tagnum = -1 ;
  G__DMRootCintLN_DMRGraincLcLdA.tagnum = -1 ;
  G__DMRootCintLN_TArrayC.tagnum = -1 ;
  G__DMRootCintLN_TH2F.tagnum = -1 ;
  G__DMRootCintLN_DMRImage.tagnum = -1 ;
  G__DMRootCintLN_DMRImagecLcLdA.tagnum = -1 ;
  G__DMRootCintLN_DMRImageCl.tagnum = -1 ;
  G__DMRootCintLN_DMRFrame.tagnum = -1 ;
  G__DMRootCintLN_DMRFrameRaw.tagnum = -1 ;
  G__DMRootCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__DMRootCintLN_DMRMicrotrack.tagnum = -1 ;
  G__DMRootCintLN_TArrayF.tagnum = -1 ;
  G__DMRootCintLN_DMRViewHeader.tagnum = -1 ;
  G__DMRootCintLN_DMRRun.tagnum = -1 ;
  G__DMRootCintLN_TTree.tagnum = -1 ;
  G__DMRootCintLN_TFile.tagnum = -1 ;
  G__DMRootCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G__DMRootCintLN_TDatime.tagnum = -1 ;
  G__DMRootCintLN_DMRRunHeader.tagnum = -1 ;
  G__DMRootCintLN_AlignmentParView.tagnum = -1 ;
  G__DMRootCintLN_AlignmentParFrame.tagnum = -1 ;
  G__DMRootCintLN_DMRTextFile.tagnum = -1 ;
  G__DMRootCintLN_DMRFiducialMark.tagnum = -1 ;
  G__DMRootCintLN_DMRMarksSet.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableDMRootCint() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__DMRootCintLN_TClass);
   G__get_linked_tagnum_fwd(&G__DMRootCintLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__DMRootCintLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__DMRootCintLN_TObject);
   G__get_linked_tagnum_fwd(&G__DMRootCintLN_TString);
   G__get_linked_tagnum_fwd(&G__DMRootCintLN_string);
   G__get_linked_tagnum_fwd(&G__DMRootCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__DMRootCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DMRootCintLN_va_list);
   G__get_linked_tagnum_fwd(&G__DMRootCintLN_TObjArray);
   G__get_linked_tagnum_fwd(&G__DMRootCintLN_TClonesArray);
   G__get_linked_tagnum_fwd(&G__DMRootCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__DMRootCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DMRootCintLN_DMRAffine2D),sizeof(DMRAffine2D),-1,29952,(char*)NULL,G__setup_memvarDMRAffine2D,G__setup_memfuncDMRAffine2D);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DMRootCintLN_DMRCluster),sizeof(DMRCluster),-1,29952,(char*)NULL,G__setup_memvarDMRCluster,G__setup_memfuncDMRCluster);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DMRootCintLN_DMRView),sizeof(DMRView),-1,29952,(char*)NULL,G__setup_memvarDMRView,G__setup_memfuncDMRView);
   G__get_linked_tagnum_fwd(&G__DMRootCintLN_DMRClustercLcLdA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DMRootCintLN_DMRGrain),sizeof(DMRGrain),-1,29952,(char*)NULL,G__setup_memvarDMRGrain,G__setup_memfuncDMRGrain);
   G__get_linked_tagnum_fwd(&G__DMRootCintLN_DMRGraincLcLdA);
   G__get_linked_tagnum_fwd(&G__DMRootCintLN_TArrayC);
   G__get_linked_tagnum_fwd(&G__DMRootCintLN_TH2F);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DMRootCintLN_DMRImage),sizeof(DMRImage),-1,32512,"generic image container",G__setup_memvarDMRImage,G__setup_memfuncDMRImage);
   G__get_linked_tagnum_fwd(&G__DMRootCintLN_DMRImagecLcLdA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DMRootCintLN_DMRImageCl),sizeof(DMRImageCl),-1,29952,"container for one image fragment (associated with cluster)",G__setup_memvarDMRImageCl,G__setup_memfuncDMRImageCl);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DMRootCintLN_DMRFrame),sizeof(DMRFrame),-1,29952,"container for one camera's frame",G__setup_memvarDMRFrame,G__setup_memfuncDMRFrame);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DMRootCintLN_DMRFrameRaw),sizeof(DMRFrameRaw),-1,29952,"container for one camera's frame for storage into the independent tree",G__setup_memvarDMRFrameRaw,G__setup_memfuncDMRFrameRaw);
   G__get_linked_tagnum_fwd(&G__DMRootCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DMRootCintLN_DMRMicrotrack),sizeof(DMRMicrotrack),-1,29952,(char*)NULL,G__setup_memvarDMRMicrotrack,G__setup_memfuncDMRMicrotrack);
   G__get_linked_tagnum_fwd(&G__DMRootCintLN_TArrayF);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DMRootCintLN_DMRViewHeader),sizeof(DMRViewHeader),-1,29952,(char*)NULL,G__setup_memvarDMRViewHeader,G__setup_memfuncDMRViewHeader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DMRootCintLN_DMRRun),sizeof(DMRRun),-1,62720,(char*)NULL,G__setup_memvarDMRRun,G__setup_memfuncDMRRun);
   G__get_linked_tagnum_fwd(&G__DMRootCintLN_TTree);
   G__get_linked_tagnum_fwd(&G__DMRootCintLN_TFile);
   G__get_linked_tagnum_fwd(&G__DMRootCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__DMRootCintLN_TDatime);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DMRootCintLN_DMRRunHeader),sizeof(DMRRunHeader),-1,29952,(char*)NULL,G__setup_memvarDMRRunHeader,G__setup_memfuncDMRRunHeader);
   G__get_linked_tagnum_fwd(&G__DMRootCintLN_AlignmentParView);
   G__get_linked_tagnum_fwd(&G__DMRootCintLN_AlignmentParFrame);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DMRootCintLN_DMRTextFile),sizeof(DMRTextFile),-1,29952,(char*)NULL,G__setup_memvarDMRTextFile,G__setup_memfuncDMRTextFile);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DMRootCintLN_DMRFiducialMark),sizeof(DMRFiducialMark),-1,29952,(char*)NULL,G__setup_memvarDMRFiducialMark,G__setup_memfuncDMRFiducialMark);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DMRootCintLN_DMRMarksSet),sizeof(DMRMarksSet),-1,29952,(char*)NULL,G__setup_memvarDMRMarksSet,G__setup_memfuncDMRMarksSet);
}
extern "C" void G__cpp_setupDMRootCint(void) {
  G__check_setup_version(30051515,"G__cpp_setupDMRootCint()");
  G__set_cpp_environmentDMRootCint();
  G__cpp_setup_tagtableDMRootCint();

  G__cpp_setup_inheritanceDMRootCint();

  G__cpp_setup_typetableDMRootCint();

  G__cpp_setup_memvarDMRootCint();

  G__cpp_setup_memfuncDMRootCint();
  G__cpp_setup_globalDMRootCint();
  G__cpp_setup_funcDMRootCint();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncDMRootCint();
  return;
}
class G__cpp_setup_initDMRootCint {
  public:
    G__cpp_setup_initDMRootCint() { G__add_setup_func("DMRootCint",(G__incsetup)(&G__cpp_setupDMRootCint)); G__call_setup_funcs(); }
   ~G__cpp_setup_initDMRootCint() { G__remove_setup_func("DMRootCint"); }
};
G__cpp_setup_initDMRootCint G__cpp_setup_initializerDMRootCint;

